[{"title":"FATE 1.2 实践02-FATE集群部署","url":"/2020/08/27/FATE-1-2-%E5%AE%9E%E8%B7%B502%EF%BC%9AFATE%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/","content":"配置FATE环境第1步中虚拟机创建完成后的信息如下\n\n\n\n主机名\nhost155\nguest156\nguest157\n\n\n\nIP\n192.168.119.155\n192.168.119.156\n192.168.119.157\n\n\n\n\n\n\n\n\n下面的步骤均是依据官方文档操作 \n基础环境配置注意：不特殊说明，下面配置需要在所有机器上操作！！\n由于在创建虚拟机过程中已经更改过每台主机名、创建用户app，所以文档中hostname配置可跳过。\nroot权限下创建文件夹  /data/projects 归属 app用户\n&#x2F;&#x2F;切换root用户，-p创建文件夹，给app用户赋予权限su rootmkdir -p &#x2F;data&#x2F;projectschown -R app &#x2F;data&#x2F;projects\n\n\n\n关闭selinux确认是否已安装selinux\ncentos系统执行：rpm -qa | grep selinux\nubuntu系统执行：apt list –installed | grep selinux\n如果已安装了selinux就执行：setenforce 0\n\n修改Linux最大打开文件数切换root用户，在limits.conf文件最后添加5、6行代码，保存退出\nsu rootvim &#x2F;etc&#x2F;security&#x2F;limits.conf* soft nofile 65536* hard nofile 65536\n\n\n\n\n添加主机映射vim &#x2F;etc&#x2F;hosts\n\n\n\n\n关闭虚拟机防火墙在实际生产环境中需要配置防火墙端口规则！虚拟机环境下采用关闭防火墙的方式。\n如果是Centos系统：\nsystemctl disable firewalld.servicesystemctl stop firewalld.servicesystemctl status firewalld.service\n\n本例的环境是Centos系统\n\n如果是Ubuntu系统：\nufw disableufw status\n\n给用户赋予sudo权限root用户下对app用户赋予sudo权限\nvim &#x2F;etc&#x2F;sudoers.d&#x2F;appapp ALL&#x3D;(ALL) ALLapp ALL&#x3D;(ALL) NOPASSWD: ALLDefaults !env_reset\n\n\n\n配置ssh远程登录a. 切换app用户，生成rsa_id，具体根据下面代码\n\nb.合并id_rsa_pub文件\n步骤如下：三台机器分别将id_rsa.pub 写入authorized_keys文件中并且赋予权限chomd 600\n\n155通过scp将authorized_keys文件发送到156上，并将156的id_rsa.pub文件写入，然后将生成的新文件发送至157上，并且写入157生成的id_rsa.pub文件，将最终生成的authorized_keys文件发送给155和156，此时通过ssh即可登录（在发送文件过程中建立连接需要输入密码）\n155-&gt;156\n\n156写入， -&gt;157\n\n157写入，-&gt;155  -&gt;156\n\n上述完成之后即可通过  ssh usernane@ip访问某台虚拟机\n需要注意的是，访问自身需要重新建立一个连接。\n建议配置以上步骤之后拍摄虚拟机快照，便于后期恢复重新部署。\nFATE部署完成基础环境配置之后，接下来就需要部署FATE的运行环境，本例使用的是Installation文档。\n下面的操作只需在其中一台机器操作即可，本例选用的是host 155。\n下载压缩包可以使用wget下载，也可以直接通过链接下载。\ncd &#x2F;data&#x2F;projectswget https:&#x2F;&#x2F;webank-ai-1251170195.cos.ap-guangzhou.myqcloud.com&#x2F;FATE_install_v1.2.0.tar.gztar -xf FATE_install_v1.2.0.tar.gz\n\n\n\n\n修改configuration文件可以使用vim，也可以直接使用编辑器打开并修改。\ncd &#x2F;data&#x2F;projects&#x2F;FATE&#x2F;cluster-deploy&#x2F;scriptvi multinode_cluster_configuration.sh\n\n\n\n\n\n建议在部署之前拍摄快照，为防止在部署过程中因某些配置出错造成部署失败。\n部署本例中选择在各机器上部署所有组件。\ncd FATE&#x2F;cluster-deploy&#x2F;scripts# 部署所有组件bash deploy_cluster_multinode.sh binary all # 只部署部分组件(可选：jdk python mysql redis fate_flow federatedml fateboard proxy federation roll meta-service egg)：bash deploy_cluster_multinode.sh binary fate_flow\n\n\n\n-———————————————————————————————————————-\n———————————————–漫长地等待过程——————————————————–\n-———————————————————————————————————————-\n（部署时间暂未统计，时间需要2-4个小时，记录下了部署过程中终端产生的日志）\n此处为语雀文档，点击链接查看：https://www.yuque.com/u190689/qoiq3w/seeq38\n配置检查请务必详细对照检查！！！\n到各个目标服务器上进行检查对应模块的配置是否准确，每个模块的对应配置文件所在路径可在此配置文件下查看，参考：https://github.com/FederatedAI/FATE/blob/master/cluster-deploy/doc/configuration.md\n至此，FATE v1.2的安装部署全部结束，接下来测试环境。\n建议部署成功之后拍摄快照，便于将来找到还原点。\n","categories":["联邦学习"],"tags":["FATE","FL"]},{"title":"讨论社区02 - Spring 入门","url":"/2020/08/29/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA02%20-%20Spring-%E5%85%A5%E9%97%A8/","content":"Spring全家桶\nSpring Framework \nSpring Boot\nSpring Cloud (微服务,大项目拆分成若干子项目)\nSpring Cloud Data Flow(数据集成)\n官网: https://spring.io\n\nSpring Framework\nSpring Core\nIoC、AOP  (管理对象的思想,spring管理的对象叫做Bean.)\nSpring Data Access\nTransactions(事务)、Spring MyBatis\n\n\nWeb Servlet\nSpring MVC\n\n\nIntegration(集成)\nEmail、Scheduling(定时任务)、AMQP(消息队列)、Security(安全控制)\n\n\n\nSpring IoC\nInversion of Control\n控制反转，是一种面向对象编程的设计思想。\n\n\nDependency Injection\n依赖注入，是IoC思想的实现方式。\nIoC Container\nIoC容器，是实现依赖注入的关键，本质上是一个工厂。\n容器管理Bean的前提:提供Bean的类型,通过配置文件配置Bean之间的关系.\n降低Bean之间的耦合度\n\n代码部分\n主动获取:\n\n@SpringBootApplicationpublic class TalkingApplication &#123;\tpublic static void main(String[] args) &#123;\t\tSpringApplication.run(CommunityApplication.class, args);\t&#125;&#125;配置类,启动时自动扫描,扫描配置类所在的包以及子包下的Bean.@Component @Repository @Service @Controller\n\n测试代码要以其为配置类,需加上注解:\n@ContextConfiguration(classes = TalkingApplication.class)\n\n想要使用spring容器需要实现接口,ApplicationContextAware,实现接口中set方法.传入参数applicationContext(spring容器),他是一个接口,继承自BeanFactory.\n获取Bean:applicationContext.getBean(test.class);\npublic class TalkingApplicationTests implements ApplicationContextAware &#123;\tprivate ApplicationContext applicationContext;\t@Override\tpublic void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;\t\tthis.applicationContext = applicationContext;\t&#125;&#125;\n\n给Bean自定义名字:@Component(“名字”)\n初始化方法@PostConstruct,在构造器之后调用.销毁对象之前调用,@PreDestroy.\n@Scope()指定单例多例\n@Configuration配置类,用以装载使用第三方类.\n\n自动注入:\n@Autowired\n\n\n\n","categories":["讨论社区项目"],"tags":["Spring"]},{"title":"回文串引发的“血案”","url":"/2020/08/28/%E5%9B%9E%E6%96%87%E4%B8%B2%E5%BC%95%E5%8F%91%E7%9A%84%E2%80%9C%E8%A1%80%E6%A1%88%E2%80%9D/","content":"简单枚举# 基于中心线枚举Class Solution:\tdef longestPalindrome(self,s):        if not s:            return &quot;&quot;                self.start, self.longest = 0, 0        for middle in range(len(s)):            self.find_longest_palidrome_from(s, middle, middle)            self.find_longest_palidrome_from(s, middle, middle+1)        return s[self.start:self.start + self.longest]        def find_longest_palidrome_from(self, s, left, right):        while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:            left -= 1            right += 1        if self.longest &lt; right -left -1:            self.longest = right - left -1            self.start = left +1\n\n\n动态规划# 基于动态规划（区间型：从小到大枚举区间）class Solution:\tdef longestPalindrome(self, s):        if not s:            return &quot;&quot;                n = len(s)        is_palindrome = [[False] * n for _ in range(n)]        for i in range(n):            is_palindrome[i][i] = True        for i in range(1, n):            is_palindrome[i][i-1] = True                start, longest = 0, 1        for length in range(2, n-1):            for i in range(n - length + 1):                j = i + length -1                is_palindrome[i][j] = is_palindrome[i+1][j-1] and s[i] == s[j]                if is_palindrome[i][j] and length &gt; longest:                    longest = length                    start = i         return s[start:start + longest]\n\n","categories":["算法笔记"],"tags":["回文串","动态规划"]},{"title":"FATE 1.2 实践01-虚拟机安装","url":"/2020/08/27/FATE-1-2-%E5%AE%9E%E8%B7%B501%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85/","content":"创建虚拟机新建虚拟机使用VMWare WorkStation创建虚拟机（单机版只需要一台机器，集群版可以使用多台机器，下面示例中创建了3台虚拟机，配置均为 300G，16GB，4核处理器，系统镜像为 CentOS-7-x86_64-DVD-1810版本）\n![新建向导1-创建包含空白硬盘的虚拟机](/images/FATE 1.2 实践01-虚拟机安装/1578211619356-f76a066f-77d1-4e59-bac3-c373a9822dca.png)\n![新建向导2-选择客户机操作系统](/images/FATE 1.2 实践01-虚拟机安装/1578211631941-df372176-acae-452f-aba5-e354012fe5f3.png)\n![新建向导3-命名虚拟机](/images/FATE 1.2 实践01-虚拟机安装/1578211648272-b1667e39-59da-47c9-a326-d6dee2a57c01.png)\n![新建向导4-指定磁盘容量](/images/FATE 1.2 实践01-虚拟机安装/1578211986949-3b397809-17f7-4da8-adbb-5a9bf005419d.png)                         \n![新建向导5-配置硬件信息](/images/FATE 1.2 实践01-虚拟机安装/1578212074493-4a7b30de-9d8b-4179-83cf-65770884ea44.png)\n![新建向导5-配置硬件信息](/images/FATE 1.2 实践01-虚拟机安装/1578212497000-3b362b69-9acc-457f-8827-ebf3551f3858.png)\n![虚拟机详细配置信息](/images/FATE 1.2 实践01-虚拟机安装/1578212160231-787ca313-3b1c-408e-a053-e2ef15489642.png)                                       \n配置操作系统启动虚拟机，加载并配置操作系统\n![选择默认语言](/images/FATE 1.2 实践01-虚拟机安装/1578212891912-86368f3c-b915-4e88-8429-94eadfdb17f8.png)     \n  ![image.png](/images/FATE 1.2 实践01-虚拟机安装/1578213042405-3d3882a5-eba1-4c84-b1e4-ccbab97de9d7.png)\n此处选择默认语言为【简体中文】，可以直接在编辑框输入快速查找。下一步则需要配置系统的软件、磁盘分区、网络等信息。\n![详细配置](/images/FATE 1.2 实践01-虚拟机安装/1578213182245-ffd02e18-c25e-4678-9f01-2e739060c606.png)\n这里需要注意的是详细配置图中标注的1，2，3。本例中详细的配置如下：\n![软件选择](/images/FATE 1.2 实践01-虚拟机安装/1578213258382-d9854dc5-5778-4f2c-967e-8480f72425bb.png)\n本例中选择的是GNOME桌面版的软件，已选环境附加选项可根据实际需要选择，选择桌面版的可视化环境有利于后续工作的进行。下一步选择安装目标位置中提前配置分区信息尤为重要！！！\n![安装目标位置1-重新配置分区](/images/FATE 1.2 实践01-虚拟机安装/1578213312407-738ef352-50ea-40f5-8c5e-e7b8979be917.png)\n![安装目标位置2-选择自动创建分区](/images/FATE 1.2 实践01-虚拟机安装/1578213342097-9320d6a9-2d4f-4b79-ae7f-65ee9738202c.png)\n![安装目标位置3-重新配置分区磁盘](/images/FATE 1.2 实践01-虚拟机安装/1578213415357-a2e519d4-f0ef-4c11-87fd-c2c56b5fa507.png)\n官方文档中建议全部磁盘挂载到新建的用户app下，但是本例中将大部分磁盘挂载到root下，经实践是有效的，在如上配置之后点击【完成】即可完成磁盘及分区的配置。\n下一步需要提前完成系统网络信息的配置，如主机名、ip、子网掩码、DNS、路由信息等。\n![配置主机名](/images/FATE 1.2 实践01-虚拟机安装/1578213943847-be3ce5b6-ed0f-4881-b5b9-70a653ffe581.png)\n点击【配置】可进入ip、DNS等信息的配置。\n![网络信息详细配置](/images/FATE 1.2 实践01-虚拟机安装/1578214029364-e40dc499-9843-4930-8cc8-bbe7a45cb666.png)\n在上图的配置中需要注意的是，选择手动配置IPv4的信息，地址、子网掩码和网关需要配置正确，本例中DNS服务器默认为网关信息。网络信息配置完成之后可以【开启】以太网的连接，详细的信息可以参考下图\n![网络配置详细信息](/images/FATE 1.2 实践01-虚拟机安装/1578214278690-9d37e778-1145-42b9-916d-e61d53b056c5.png)\n1，2，3的所有信息完成配置之后点击【开始安装】则进入安装界面，此时可以配置系统root用户的密码以及新建用户。本例中遵循官方文档创建用户 app，在“高级用户配置”中，编辑app分属apps组，用户id为6000。\n![安装进度页面](/images/FATE 1.2 实践01-虚拟机安装/1578214428608-d9cd0512-bddb-4fc7-b022-67dfd3849d0f.png)\n![高级用户配置](/images/FATE 1.2 实践01-虚拟机安装/1578214478054-80630f51-9a98-42ed-a785-42b58a0d1312.png)\n等待安装完成，【重启】即可进入桌面版的centos7 操作系统。\n![等待重启](/images/FATE 1.2 实践01-虚拟机安装/1578215717450-609c6d2b-2ceb-449c-86fd-0ef8daecbce6.png)\n初始设置需要接受许可证协议，【完成配置】即可登录输入密码，进入系统。\n![许可证](/images/FATE 1.2 实践01-虚拟机安装/1578215847178-545b18e3-a15b-4a0d-9475-ee1bbb3631f2.png)\n提示：在实际操作中无需一步步按照上述步骤创建三台或多台虚拟机，在创建完成一台虚拟机之后可以通过“克隆”操作得到已安装完成的虚拟机镜像，这样可以在一定程度上节约创建虚拟机的时间，需要注意的是，在克隆完成启动之前需要重新生成机器的mac地址，否则会造成mac冲突。因为原始虚拟机使用的是静态地址，所以在开启之后需要重新对副本虚拟机分配静态IP。\n克隆方法主要是： 点击 虚拟机-管理-克隆  使用克隆虚拟机向导\n![克隆虚拟机01](/images/FATE 1.2 实践01-虚拟机安装/1578289326701-c9d9cbf8-c722-417d-9fc2-2778a37041c1.png)\n![克隆虚拟机02](/images/FATE 1.2 实践01-虚拟机安装/1578289363276-dbcda949-dd42-465c-a981-1dfe75e101c6.png)\n![克隆虚拟机03](/images/FATE 1.2 实践01-虚拟机安装/1578289390103-91ec1bac-0ad9-412a-94a2-6b5343a850f5.png)\n重命名和选择虚拟机所在路径之后点击【完成】即可。\n![重命名01](/images/FATE 1.2 实践01-虚拟机安装/1578289456259-1bf9f72d-24df-4056-8b78-91206ac8723f.png)\n![重命名02](/images/FATE 1.2 实践01-虚拟机安装/1578289469898-3cf24c9f-9555-4a20-8bcd-d0e4de56eefd.png)\n![克隆完成后的配置](/images/FATE 1.2 实践01-虚拟机安装/1578287585987-8c999e3a-1337-4548-8d74-3c08fe796f02.png)\n打开虚拟机之后可以使用  ifconfig查看网络配置信息\n![查看配置](/images/FATE 1.2 实践01-虚拟机安装/1578288131550-c9753bd9-6886-4dd4-9ce6-bc87971b482b.png)\n需要更改的信息有 主机名、ip\n![修改信息01](/images/FATE 1.2 实践01-虚拟机安装/1578288307841-e6299fea-87c6-41fe-822f-6649e02f4d8e.png)\n配置IP信息主要路径在 /etc/sysconfig/network-script，修改 sysconf-ens33 （ens33指的是网卡名称）\n文件中可以修改的有是否静态ip，PROTO一项改为 static  配置ip地址，子网掩码，网关，dns\n![修改信息02](/images/FATE 1.2 实践01-虚拟机安装/1578288596711-36122905-dd83-4146-9119-abbe8de4ae92.png)\n进入编辑页面\n![修改信息03](/images/FATE 1.2 实践01-虚拟机安装/1578288653339-0a91cfbd-67ba-482a-a533-dac9fe4a1c67.png)\n半角状态输入’i’可修改内容，修改完成如下，Esc退出编辑，”:wq”可以保存修改并退出vim编辑页面\n![修改信息04](/images/FATE 1.2 实践01-虚拟机安装/1578288819423-b94e630c-3bc7-4c08-9f67-cde7aba7af8e.png)\n重启之后使用ifconfig查看，ip已经改变。\n克隆得到另外两台虚拟机，按上述步骤修改IP信息之后即完成了本例中的创建虚拟机步骤。\n\n","categories":["联邦学习"],"tags":["FATE","FL"]},{"title":"找不到请求的.Net Framework Data Provider.可能没有安装.  错误","url":"/2019/07/27/%E6%89%BE%E4%B8%8D%E5%88%B0%E8%AF%B7%E6%B1%82%E7%9A%84-Net-Framework-Data-Provider-%E5%8F%AF%E8%83%BD%E6%B2%A1%E6%9C%89%E5%AE%89%E8%A3%85-%E9%94%99%E8%AF%AF/","content":"问题：这几天在装.NET 的开发环境，在装好VS2013和Oracle 11g之后，做了一个测试项目，运行调试没问题但是涉及到数据库相关操作，如新建数据集、连接数据库等在调试的时候则会出现如下错误：\n\n目前百度之后现存的解决方案：\noracle odp.net 32位/64位版本的问题解决方案链接；当然如果觉得这篇写的不怎么清楚，还可以点击 这里*（我碰到的就是这个问题，但是据博主提供的方法没有解决问题）*\n\nMicrosoft SQL Server Compact 4.0没有安装 这个问题是比较好解决的，只用安装Microsoft SQL Server Compact4.0即可，具体可以点击这里\n\n还有修改machine.config配置文件的方法，大家也可以尝试点击这里\n当然如果你的数据库使用的Oracle，节点配置的时候需要根据实际情况做出调整。具体文件配置路径：C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Config下面的machine.config用记事本打开，查看下列节点是否存在oracle的相关配置\n&lt;system.data&gt;    &lt;DbProviderFactories&gt;      &lt;add name&#x3D;&quot;ODP.NET, Managed Driver&quot; invariant&#x3D;&quot;Oracle.ManagedDataAccess.Client&quot; description&#x3D;&quot;Oracle Data Provider for .NET, Managed Driver&quot; type&#x3D;&quot;Oracle.ManagedDataAccess.Client.OracleClientFactory, Oracle.ManagedDataAccess, Version&#x3D;4.121.2.0, Culture&#x3D;neutral, PublicKeyToken&#x3D;89b483f429c47342&quot; &#x2F;&gt;      &lt;add name&#x3D;&quot;Microsoft SQL Server Compact Data Provider 4.0&quot; invariant&#x3D;&quot;System.Data.SqlServerCe.4.0&quot; description&#x3D;&quot;.NET Framework Data Provider for Microsoft SQL Server Compact&quot; type&#x3D;&quot;System.Data.SqlServerCe.SqlCeProviderFactory, System.Data.SqlServerCe, Version&#x3D;4.0.0.0, Culture&#x3D;neutral, PublicKeyToken&#x3D;89845dcd8080cc91&quot; &#x2F;&gt;    &lt;&#x2F;DbProviderFactories&gt;  &lt;&#x2F;system.data&gt;\n\n新添加的应该是这一块：\n&lt;add name&#x3D;&quot;ODP.NET, Managed Driver&quot; invariant&#x3D;&quot;Oracle.ManagedDataAccess.Client&quot; description&#x3D;&quot;Oracle Data Provider for .NET, Managed Driver&quot; type&#x3D;&quot;Oracle.ManagedDataAccess.Client.OracleClientFactory, Oracle.ManagedDataAccess, Version&#x3D;4.121.2.0, Culture&#x3D;neutral, PublicKeyToken&#x3D;89b483f429c47342&quot; &#x2F;&gt;\n\n个人解决方案前面说过了，我尝试了上述的一些办法之后仍然没有解决问题，熬不住了我就去csdn的论坛发了帖，等了半个小时没人回复（可能是积分太少吧），无奈我就自己继续鼓捣了。想起来自己有一个 ODAC 12c的安装包，就直接点击安装了，安装完成之后重启VS，继续新建项目，配置数据库，调试之后竟然没有再继续报错，也就是说这个问题被我糊里糊涂解决了，哈哈哈~\n写一篇记录一下，给各位一个借鉴也给自己一个教训。下面提供ODAC 12c的下载地址\n官方下载地址：x64下载、x86下载\n如果没有oracle账号又或是账号无法登陆，可以通过这个链接下载， 密码：amvz\n\n\n","categories":["编程笔记"],"tags":[".net"]},{"title":"hexo快速开始","url":"/2019/06/30/hexo%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","categories":["随笔"],"tags":["随笔"]},{"title":"JavaSpring项目使用Mail包发送邮件报错无法连接服务器Could not connect to SMTP host","url":"/2019/06/28/JavaSpring%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8Mail%E5%8C%85%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E6%8A%A5%E9%94%99%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8Could-not-connect-to-SMTP-host/","content":"问题在使用SpringBoot的mail依赖库连接sina邮箱发送邮件时遇到如下问题：\norg.springframework.mail.MailSendException: Mail server connection failed; nested exception is javax.mail.MessagingException: Could not connect to SMTP host: smtp.sina.com, port: 465;  nested exception is:\tjavax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target. Failed messages: javax.mail.MessagingException: Could not connect to SMTP host: smtp.sina.com, port: 465;  nested exception is:\tjavax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target; message exception details (1) are:Failed message 1:javax.mail.MessagingException: Could not connect to SMTP host: smtp.sina.com, port: 465;  nested exception is:\tjavax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target\tat com.sun.mail.smtp.SMTPTransport.openServer(SMTPTransport.java:2211)\tat com.sun.mail.smtp.SMTPTransport.protocolConnect(SMTPTransport.java:722)\tat javax.mail.Service.connect(Service.java:342)\tat org.springframework.mail.javamail.JavaMailSenderImpl.connectTransport(JavaMailSenderImpl.java:518)\tat org.springframework.mail.javamail.JavaMailSenderImpl.doSend(JavaMailSenderImpl.java:437)\tat org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:361)\tat org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:356)\tat com.wx.talking.util.MailClient.sendMail(MailClient.java:36)\tat com.wx.talking.MailTests.testTextMail(MailTests.java:24)\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\tat java.lang.reflect.Method.invoke(Method.java:497)\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\tat org.springframework.test.context.junit4.statements.RunBeforeTestExecutionCallbacks.evaluate(RunBeforeTestExecutionCallbacks.java:74)\tat org.springframework.test.context.junit4.statements.RunAfterTestExecutionCallbacks.evaluate(RunAfterTestExecutionCallbacks.java:84)\tat org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)\tat org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)\tat org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\tat org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)\tat org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)Caused by: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target\tat sun.security.ssl.Alerts.getSSLException(Alerts.java:192)\tat sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1949)\tat sun.security.ssl.Handshaker.fatalSE(Handshaker.java:302)\tat sun.security.ssl.Handshaker.fatalSE(Handshaker.java:296)\tat sun.security.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1509)\tat sun.security.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:216)\tat sun.security.ssl.Handshaker.processLoop(Handshaker.java:979)\tat sun.security.ssl.Handshaker.process_record(Handshaker.java:914)\tat sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1062)\tat sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1375)\tat sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1403)\tat sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1387)\tat com.sun.mail.util.SocketFetcher.configureSSLSocket(SocketFetcher.java:602)\tat com.sun.mail.util.SocketFetcher.createSocket(SocketFetcher.java:376)\tat com.sun.mail.util.SocketFetcher.getSocket(SocketFetcher.java:214)\tat com.sun.mail.smtp.SMTPTransport.openServer(SMTPTransport.java:2160)\t... 38 moreCaused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target\tat sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:387)\tat sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:292)\tat sun.security.validator.Validator.validate(Validator.java:260)\tat sun.security.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:324)\tat sun.security.ssl.X509TrustManagerImpl.checkTrusted(X509TrustManagerImpl.java:229)\tat sun.security.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:124)\tat sun.security.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1491)\t... 49 moreCaused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target\tat sun.security.provider.certpath.SunCertPathBuilder.build(SunCertPathBuilder.java:146)\tat sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:131)\tat java.security.cert.CertPathBuilder.build(CertPathBuilder.java:280)\tat sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:382)\t... 55 more\n\n分析从日志可以定位原因——没有连接到服务器（smtp.sina.com），原因有很多：\n\n账号密码配置错误？\n开启SSL登录，端口是否正确？\n证书问题？\n\n本文遇到的就是第三个问题。\n先放一张图，便于理解\n\n解决方法当然，StackOverflow上也能找到对应解决方法。\n代码在最后，先给出使用方法\nUsage:Need to compile, first:javac InstallCert.javaNote: since java 11, you can run it directly without compiling it first:java --source 11 InstallCert.java &lt;args&gt;# Access server, and retrieve certificate (accept default certificate 1)java InstallCert [--proxy&#x3D;proxyHost:proxyPort] &lt;host&gt;[:port] [passphrase]# Extract certificate from created jssecacerts keystorekeytool -exportcert -alias [host]-1 -keystore jssecacerts -storepass changeit -file [host].cer# Import certificate into system keystorekeytool -importcert -alias [host] -keystore [path to system keystore] -storepass changeit -file [host].cer# Example:java InstallCert woot.com:443    Loading KeyStore &#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-6-sun-1.6.0.26&#x2F;jre&#x2F;lib&#x2F;security&#x2F;cacerts...    Opening connection to woot.com:443...    Starting SSL handshake...    javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target    &lt;...&gt;    Server sent 1 certificate(s):     1 Subject O&#x3D;Woot Inc, C&#x3D;US, ST&#x3D;Texas, L&#x3D;Carrollton, CN&#x3D;*.woot.com       Issuer  CN&#x3D;SecureTrust CA, O&#x3D;SecureTrust Corporation, C&#x3D;US       sha1    4b 46 ca 6b 83 05 b3 51 ff c6 e7 9c fd b3 9b e3 3f 2e c4 53        md5     e8 a5 88 1b d5 67 bb fc 88 cc b1 c5 2b ac c4 7d     Enter certificate to add to trusted keystore or &#39;q&#39; to quit: [1][enter]    [    [      Version: V3      Subject: O&#x3D;Woot Inc, C&#x3D;US, ST&#x3D;Texas, L&#x3D;Carrollton, CN&#x3D;*.woot.com      Signature Algorithm: SHA1withRSA, OID &#x3D; 1.2.840.113549.1.1.5    &lt;...&gt;    Added certificate to keystore &#39;jssecacerts&#39; using alias &#39;woot.com-1&#39;keytool -exportcert -alias woot.com-1 -keystore jssecacerts -storepass changeit -file woot.com.cer    Certificate stored in file &lt;woot.com.cer&gt;  (sudo) keytool -importcert -alias woot.com -keystore &#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-6-sun-1.6.0.26&#x2F;jre&#x2F;lib&#x2F;security&#x2F;cacerts -storepass changeit -file woot.com.cer    Owner: O&#x3D;Woot Inc, C&#x3D;US, ST&#x3D;Texas, L&#x3D;Carrollton, CN&#x3D;*.woot.com    Issuer: CN&#x3D;SecureTrust CA, O&#x3D;SecureTrust Corporation, C&#x3D;US      &lt;...&gt;      Trust this certificate? [no]:  yes    Certificate was added to keystore\n\n//利用java生成证书文件，复制到jre的security文件夹\n&#x2F;* * Copyright 2006 Sun Microsystems, Inc.  All Rights Reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions * are met: * *   - Redistributions of source code must retain the above copyright *     notice, this list of conditions and the following disclaimer. * *   - Redistributions in binary form must reproduce the above copyright *     notice, this list of conditions and the following disclaimer in the *     documentation and&#x2F;or other materials provided with the distribution. * *   - Neither the name of Sun Microsystems nor the names of its *     contributors may be used to endorse or promote products derived *     from this software without specific prior written permission. * * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS * IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. *&#x2F;&#x2F;** * Originally from: * http:&#x2F;&#x2F;blogs.sun.com&#x2F;andreas&#x2F;resource&#x2F;InstallCert.java * Use: * java InstallCert hostname * Example: *% java InstallCert ecc.fedora.redhat.com *&#x2F;import javax.net.ssl.*;import java.io.*;import java.security.KeyStore;import java.security.MessageDigest;import java.security.cert.CertificateException;import java.security.cert.X509Certificate;&#x2F;** * Class used to add the server&#39;s certificate to the KeyStore * with your trusted certificates. *&#x2F;public class InstallCert &#123;    public static void main(String[] args) throws Exception &#123;        String host;        int port;        char[] passphrase;        if ((args.length &#x3D;&#x3D; 1) || (args.length &#x3D;&#x3D; 2)) &#123;            String[] c &#x3D; args[0].split(&quot;:&quot;);            host &#x3D; c[0];            port &#x3D; (c.length &#x3D;&#x3D; 1) ? 443 : Integer.parseInt(c[1]);            String p &#x3D; (args.length &#x3D;&#x3D; 1) ? &quot;changeit&quot; : args[1];            passphrase &#x3D; p.toCharArray();        &#125; else &#123;            System.out.println(&quot;Usage: java InstallCert &lt;host&gt;[:port] [passphrase]&quot;);            return;        &#125;        File file &#x3D; new File(&quot;jssecacerts&quot;);        if (file.isFile() &#x3D;&#x3D; false) &#123;            char SEP &#x3D; File.separatorChar;            File dir &#x3D; new File(System.getProperty(&quot;java.home&quot;) + SEP                    + &quot;lib&quot; + SEP + &quot;security&quot;);            file &#x3D; new File(dir, &quot;jssecacerts&quot;);            if (file.isFile() &#x3D;&#x3D; false) &#123;                file &#x3D; new File(dir, &quot;cacerts&quot;);            &#125;        &#125;        System.out.println(&quot;Loading KeyStore &quot; + file + &quot;...&quot;);        InputStream in &#x3D; new FileInputStream(file);        KeyStore ks &#x3D; KeyStore.getInstance(KeyStore.getDefaultType());        ks.load(in, passphrase);        in.close();        SSLContext context &#x3D; SSLContext.getInstance(&quot;TLS&quot;);        TrustManagerFactory tmf &#x3D;                TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());        tmf.init(ks);        X509TrustManager defaultTrustManager &#x3D; (X509TrustManager) tmf.getTrustManagers()[0];        SavingTrustManager tm &#x3D; new SavingTrustManager(defaultTrustManager);        context.init(null, new TrustManager[]&#123;tm&#125;, null);        SSLSocketFactory factory &#x3D; context.getSocketFactory();        System.out.println(&quot;Opening connection to &quot; + host + &quot;:&quot; + port + &quot;...&quot;);        SSLSocket socket &#x3D; (SSLSocket) factory.createSocket(host, port);        socket.setSoTimeout(10000);        try &#123;            System.out.println(&quot;Starting SSL handshake...&quot;);            socket.startHandshake();            socket.close();            System.out.println();            System.out.println(&quot;No errors, certificate is already trusted&quot;);        &#125; catch (SSLException e) &#123;            System.out.println();            e.printStackTrace(System.out);        &#125;        X509Certificate[] chain &#x3D; tm.chain;        if (chain &#x3D;&#x3D; null) &#123;            System.out.println(&quot;Could not obtain server certificate chain&quot;);            return;        &#125;        BufferedReader reader &#x3D;                new BufferedReader(new InputStreamReader(System.in));        System.out.println();        System.out.println(&quot;Server sent &quot; + chain.length + &quot; certificate(s):&quot;);        System.out.println();        MessageDigest sha1 &#x3D; MessageDigest.getInstance(&quot;SHA1&quot;);        MessageDigest md5 &#x3D; MessageDigest.getInstance(&quot;MD5&quot;);        for (int i &#x3D; 0; i &lt; chain.length; i++) &#123;            X509Certificate cert &#x3D; chain[i];            System.out.println                    (&quot; &quot; + (i + 1) + &quot; Subject &quot; + cert.getSubjectDN());            System.out.println(&quot;   Issuer  &quot; + cert.getIssuerDN());            sha1.update(cert.getEncoded());            System.out.println(&quot;   sha1    &quot; + toHexString(sha1.digest()));            md5.update(cert.getEncoded());            System.out.println(&quot;   md5     &quot; + toHexString(md5.digest()));            System.out.println();        &#125;        System.out.println(&quot;Enter certificate to add to trusted keystore or &#39;q&#39; to quit: [1]&quot;);        String line &#x3D; reader.readLine().trim();        int k;        try &#123;            k &#x3D; (line.length() &#x3D;&#x3D; 0) ? 0 : Integer.parseInt(line) - 1;        &#125; catch (NumberFormatException e) &#123;            System.out.println(&quot;KeyStore not changed&quot;);            return;        &#125;        X509Certificate cert &#x3D; chain[k];        String alias &#x3D; host + &quot;-&quot; + (k + 1);        ks.setCertificateEntry(alias, cert);        OutputStream out &#x3D; new FileOutputStream(&quot;jssecacerts&quot;);        ks.store(out, passphrase);        out.close();        System.out.println();        System.out.println(cert);        System.out.println();        System.out.println                (&quot;Added certificate to keystore &#39;jssecacerts&#39; using alias &#39;&quot;                        + alias + &quot;&#39;&quot;);    &#125;    private static final char[] HEXDIGITS &#x3D; &quot;0123456789abcdef&quot;.toCharArray();    private static String toHexString(byte[] bytes) &#123;        StringBuilder sb &#x3D; new StringBuilder(bytes.length * 3);        for (int b : bytes) &#123;            b &amp;&#x3D; 0xff;            sb.append(HEXDIGITS[b &gt;&gt; 4]);            sb.append(HEXDIGITS[b &amp; 15]);            sb.append(&#39; &#39;);        &#125;        return sb.toString();    &#125;    private static class SavingTrustManager implements X509TrustManager &#123;        private final X509TrustManager tm;        private X509Certificate[] chain;        SavingTrustManager(X509TrustManager tm) &#123;            this.tm &#x3D; tm;        &#125;        public X509Certificate[] getAcceptedIssuers() &#123;\t   \t    &#x2F;** \t     * This change has been done due to the following resolution advised for Java 1.7+\t\thttp:&#x2F;&#x2F;infposs.blogspot.kr&#x2F;2013&#x2F;06&#x2F;installcert-and-java-7.html       \t     **&#x2F; \t    \t    return new X509Certificate[0];\t            &#x2F;&#x2F;throw new UnsupportedOperationException();        &#125;        public void checkClientTrusted(X509Certificate[] chain, String authType)                throws CertificateException &#123;            throw new UnsupportedOperationException();        &#125;        public void checkServerTrusted(X509Certificate[] chain, String authType)                throws CertificateException &#123;            this.chain &#x3D; chain;            tm.checkServerTrusted(chain, authType);        &#125;    &#125;&#125;\n\n","categories":["编程笔记"],"tags":["SpringBoot"]},{"title":"讨论社区07  -  版本控制","url":"/2019/06/26/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA07%20-%20%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/","content":"\n认识Git\nGit简介\nGit的安装与配置\n\n\nGit常用命令\n将代码提交至本地仓库\n将代码上传至远程仓库\n\n\nIDEA集成Git\n在IDEA中配置并使用Git\n\n\n\n# 账号配置git config --listgit config --global user.name &quot;wangxu&quot;git config --global user.email &quot;xxx@gmail.com&quot;# 本地仓库git initgit status -sgit add *git commit -m &#x27;...&#x27;# 生成秘钥ssh-keygen -t rsa -C &quot;xxx@gmail.com&quot;# 推送已有项目git remote add originhttps://github.com/4Details/Test.gitgit push -u origin master# 克隆已有仓库git clone https://github.com/4Details/Test.git\n\n","categories":["讨论社区项目"],"tags":["Spring","Git"]},{"title":"讨论社区06  -  项目调试技巧","url":"/2019/06/23/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA06%20-%20%E9%A1%B9%E7%9B%AE%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/","content":"\n响应状态码的含义\n服务端断点调试技巧\n客户端断点调试技巧\n设置日志级别，并将日志输出到不同的终端\n\n","categories":["讨论社区项目","编程笔记"],"tags":["Bug调试"]},{"title":"讨论社区05  -  讨论社区首页实现","url":"/2019/06/21/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA05%20-%20%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A6%96%E9%A1%B5%E5%AE%9E%E7%8E%B0/","content":"\n开发流程\n1次请求的执行过程\n\n\n分步实现\n开发社区首页，显示前10个帖子\n开发分页组件，分页显示所有的帖子\n\n![Spring MVC流程](/images/讨论社区05 - 讨论社区首页实现.assets/20191114210434.png)\n","categories":["讨论社区项目"],"tags":["Spring"]},{"title":"讨论社区04  -  Mybatis  入门","url":"/2019/06/18/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA04%20-%20MyBatis-%E5%85%A5%E9%97%A8/","content":"安装数据库\n安装MySQL Server\n安装MySQL Workbench\n\nMyBatis\n核心组件\nSqlSessionFactory：用于创建SqlSession的工厂类。\nSqlSession：MyBatis的核心组件，用于向数据库执行SQL。\n主配置文件：XML配置文件，可以对MyBatis的底层行为做出详细的配置。\nMapper接口：就是DAO接口，在MyBatis中习惯性的称之为Mapper。\nMapper映射器：用于编写SQL，并将SQL和实体类映射的组件，采用XML、注解均可实现。\n\n\n示例\n使用MyBatis对用户表进行CRUD操作。\n\n\n在application.properties中配置数据库、Mybatis相关。\n\n","categories":["讨论社区项目"],"tags":["Spring","Mybatis"]},{"title":"讨论社区03  -  Spring MVC 入门","url":"/2019/06/14/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA03%20-%20Spring-MVC-%E5%85%A5%E9%97%A8/","content":"HTTP\nHyperText Transfer Protocol\n用于传输HTML等内容的应用层协议\n规定了浏览器和服务器之间如何通信，以及通信时的数据格式。\n学习网站：https://developer.mozilla.org/zh-CN\n\n浏览器服务器通信步骤：\n\n打开一个TCP连接\n发生一个HTTP报文 \n读取服务器返回的报文信息\n关闭连接或为后续请求重用连接\n\n\n按下F12进入调试，在Network下看请求响应（Header和Response）\n\nSpring MVC\n三层架构\n表现层(mvc)、业务层、数据访问层\n\n\nMVC(设计模式)\nModel：模型层\nView：视图层\nController：控制层\n核心组件\n前端控制器：DispatcherServlet\n\n\n\n浏览器访问服务器，首先访问的时Controller控制层，Controller调用业务层处理，处理完后将得到的数据封装到Model,传给视图层。\n ![Spring MVC官方架构](/images/讨论社区03 - Spring-MVC-入门.assets/image-20191111134655288.png)\nThymeleaf\n模板引擎\n\n生成动态的HTML。\n\n\nThymeleaf\n\n倡导自然模板，即以HTML文件为模板。\n\n\n常用语法\n\n标准表达式、判断与循环、模板的布局。\n\n&lt;!--声明thymeleaf模板--&gt;&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot; xmlns:sec=&quot;http://www.thymeleaf.org/extras/spring-security&quot;&gt;    &lt;!--静态资源也需要做路径处理，带url的不需要处理--&gt;&lt;link rel=&quot;stylesheet&quot; th:href=&quot;@&#123;/css/global.css&#125;&quot; /&gt;&lt;link rel=&quot;stylesheet&quot; th:href=&quot;@&#123;/css/discuss-detail.css&#125;&quot; /&gt;\n\n&lt;!--标签是否显示demo--&gt;&lt;!--usernameMsg为Controller的model传过来的值--&gt;&lt;div class=&quot;col-sm-10&quot;&gt;\t\t&lt;input type=&quot;text&quot;\t\t\tth:class=&quot;|form-control $&#123;usernameMsg!=null?&#x27;is-invalid&#x27;:&#x27;&#x27;&#125;|&quot;\t\t\tth:value=&quot;$&#123;user!=null?user.username:&#x27;&#x27;&#125;&quot;\t\t\tid=&quot;username&quot; name=&quot;username&quot; placeholder=&quot;请输入您的账号!&quot; required&gt;\t\t\t&lt;div class=&quot;invalid-feedback&quot; th:text=&quot;$&#123;usernameMsg&#125;&quot;&gt;\t\t\t\t该账号已存在!\t\t\t&lt;/div&gt;&lt;/div&gt;\n\n\n\n变量用  $&#123;变量名&#125;， href 中使用 @&#123;url地址&#125;，常量与变量拼接 |常量+&#123;变量名&#125;|\n&lt;span th:utext=&quot;$&#123;post.title&#125;&quot;&gt;test title&lt;/span&gt;&lt;a class=&quot;nav-link&quot; th:href=&quot;@&#123;/index&#125;&quot;&gt;首页&lt;/a&gt;&lt;form method=&quot;post&quot; th:action=&quot;@&#123;|/comment/add/$&#123;post.id&#125;|&#125;&quot;&gt;\n\n\n\n代码部分底层：\n@RequestMapping(&quot;/http&quot;)public void http(HttpServletRequest request, HttpServletResponse response) &#123;    // 获取请求数据    System.out.println(request.getMethod());    System.out.println(request.getServletPath());    Enumeration&lt;String&gt; enumeration = request.getHeaderNames();    while (enumeration.hasMoreElements()) &#123;        String name = enumeration.nextElement();        String value = request.getHeader(name);        System.out.println(name + &quot;: &quot; + value);    &#125;    System.out.println(request.getParameter(&quot;code&quot;));    // 返回响应数据    response.setContentType(&quot;text/html;charset=utf-8&quot;);    try (        PrintWriter writer = response.getWriter();    ) &#123;        writer.write(&quot;&lt;h1&gt;xx网&lt;/h1&gt;&quot;);    &#125; catch (IOException e) &#123;        e.printStackTrace();    &#125;&#125;\n\n从路径中得到变量GET（两种方法）：\n@RequestMapping(path = &quot;/students&quot;, method = RequestMethod.GET)@ResponseBodypublic String getStudents(    @RequestParam(name = &quot;current&quot;, required = false, defaultValue = &quot;1&quot;) int current,    @RequestParam(name = &quot;limit&quot;, required = false, defaultValue = &quot;10&quot;) int limit) &#123;    System.out.println(current);    System.out.println(limit);    return &quot;some students&quot;;&#125;@RequestMapping(path = &quot;/student/&#123;id&#125;&quot;, method = RequestMethod.GET)@ResponseBodypublic String getStudent(@PathVariable(&quot;id&quot;) int id) &#123;    System.out.println(id);    return &quot;a student&quot;;&#125;\n\nPOST请求:\n@RequestMapping(path = &quot;/student&quot;, method = RequestMethod.POST)@ResponseBodypublic String saveStudent(String name, int age) &#123;    System.out.println(name);    System.out.println(age);    return &quot;success&quot;;&#125;\n\n响应HTML数据(使用ModelAndView或Model):\n@RequestMapping(path = &quot;/teacher&quot;, method = RequestMethod.GET)public ModelAndView getTeacher() &#123;    ModelAndView mav = new ModelAndView();    mav.addObject(&quot;name&quot;, &quot;张三&quot;);    mav.addObject(&quot;age&quot;, 30);    mav.setViewName(&quot;/demo/view&quot;);    return mav;&#125;@RequestMapping(path = &quot;/school&quot;, method = RequestMethod.GET)public String getSchool(Model model) &#123;    model.addAttribute(&quot;name&quot;, &quot;北京大学&quot;);    model.addAttribute(&quot;age&quot;, 80);    return &quot;/demo/view&quot;;&#125;\n\n 响应JSON数据(异步请求)：Java对象 -&gt; JSON字符串 -&gt; JS对象,使用@ResponseBody 注解\n@RequestMapping(path = &quot;/emp&quot;, method = RequestMethod.GET)@ResponseBodypublic Map&lt;String, Object&gt; getEmp() &#123;    Map&lt;String, Object&gt; emp = new HashMap&lt;&gt;();    emp.put(&quot;name&quot;, &quot;张三&quot;);    emp.put(&quot;age&quot;, 23);    return emp;&#125;//转换为json字符串  &#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:&quot;23&quot;&#125;//也可以返回List&lt;Map&lt;String, Object&gt;&gt;，list集合。\n\n","categories":["讨论社区项目"],"tags":["SpringMVC"]},{"title":"讨论社区01 - 搭建开发环境","url":"/2019/06/12/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA01%20-%20%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","content":"Apache Maven\n可以帮助我们构建项目、管理项目中的jar包\nMaven仓库：存放构件的位置\n构件:创建项目时依赖的资源jar包.\n本地仓库：默认是 ~/.m2/repository\n远程仓库：中央仓库(官网)、镜像仓库(第三方网站)、私服仓库(公司自己搭建)\n\n\n示例：安装、配置、常用命令\n下载 : http://maven.apache.org\n解压,配置conf文件夹下,settings.xml.修改为阿里云镜像仓库.标签下修改网址.\n\n\n\n&lt;mirror&gt;    &lt;id&gt;alimaven&lt;/id&gt;    &lt;name&gt;aliyun maven&lt;/name&gt;    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        &lt;/mirror&gt;\n\n\n将bin文件路径配置到环境变量（添加到环境变量之后可以在 cmd 使用 mvn 命令）\n常用命令: 创建,编译(生成target文件夹),清除,测试.\n\nmvn cleanmvn buildmvn install\n\n在实际开发过程中可以将maven配置到其他路径。\n![自定义配置maven](/images/讨论社区01 - 环境配置.assets/1598700025905.png)\nIntelliJ IDEA\n目前最流行的Java集成开发工具\n示例：安装、配置、创建项目\n下载: http://www.jetbrains.com/idea\nEclipse创建的项目需要导入(import),IDEA的直接open就可以.\nSettings的Editor下设置maven及其配置文件.\n创建maven模板项目.\n重新编译 Ctrl+F9\n\n\n\nSpring Initialize\n把包进行整合按功能划分归类.\n\n创建 Spring Boot 项目的引导工具\n\nhttps://start.spring.io\n\n![start spring](/images/讨论社区01 - 环境配置.assets/1598700315598.png)\n\n示例：创建“讨论社区”项目\n\nspringboot内嵌了Tomcat.\n\n\n\nSpring Boot 入门示例\nSpring Boot 核心作用\n起步依赖、自动配置、端点监控\n\n起步依赖 ：创建项目之后直接通过配置pom.xml ，在其中添加 starter 需要的 jar 包则可以启动一个hello demo。\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\txsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;\t&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\t&lt;parent&gt;\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\t\t&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\t\t&lt;version&gt;2.2.0.RELEASE&lt;/version&gt;\t\t&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\t&lt;/parent&gt;\t&lt;groupId&gt;com.wx&lt;/groupId&gt;\t&lt;artifactId&gt;talking&lt;/artifactId&gt;\t&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\t&lt;name&gt;talking&lt;/name&gt;\t&lt;description&gt;a community demo&lt;/description&gt;\t&lt;properties&gt;\t\t&lt;java.version&gt;1.8&lt;/java.version&gt;\t&lt;/properties&gt;\t&lt;dependencies&gt;        &lt;!--springboot Thymeleaf模板支持--&gt;\t\t&lt;dependency&gt;\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\t\t\t&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;\t\t&lt;/dependency&gt;        &lt;!--springboot web模块支持--&gt;\t\t&lt;dependency&gt;\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\t\t\t&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\t\t&lt;/dependency&gt;\t\t&lt;!--mysql 数据库连接--&gt;\t\t&lt;dependency&gt;\t\t\t&lt;groupId&gt;mysql&lt;/groupId&gt;\t\t\t&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\t\t\t&lt;version&gt;8.0.18&lt;/version&gt;\t\t&lt;/dependency&gt;\t\t&lt;!--mybatis jar--&gt;\t\t&lt;dependency&gt;\t\t\t&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;\t\t\t&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;\t\t\t&lt;version&gt;2.1.0&lt;/version&gt;\t\t&lt;/dependency&gt;\t&lt;/dependencies&gt;\t&lt;build&gt;\t\t&lt;plugins&gt;\t\t\t&lt;plugin&gt;\t\t\t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\t\t\t\t&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\t\t\t&lt;/plugin&gt;\t\t&lt;/plugins&gt;\t&lt;/build&gt;&lt;/project&gt;\n\nspring-boot-starter-web包自动帮我们引入了web模块开发需要的相关jar包，\nmybatis-spring-boot-starter帮我们引入了dao开发相关的jar包。\nspring-boot-starter-xxx是官方提供的starter，xxx-spring-boot-starter是第三方提供的starter。\n自动配置：利用 @Configuration 等注解的方式改造传统的基于 xml 的 bean 的配置\n&lt;!--传统基于 xml 方式配置 bean--&gt;&lt;beans&gt;      &lt;bean id = &quot;car&quot; class=&quot;com.wx.talking.entity.Car&quot;&gt;          &lt;property name=&quot;wheel&quot; ref = &quot;wheel&quot;&gt;&lt;/property&gt;      &lt;/bean&gt;      &lt;bean id = &quot;wheel&quot; class=&quot;com.itpsc.Wheel&quot;&gt;&lt;/bean&gt;  &lt;/beans&gt;\n\n// 使用注解的方式在java中配置@Configuration  public class Conf &#123;      @Bean      public Car car() &#123;          Car car = new Car();          car.setWheel(wheel());          return car;      &#125;      @Bean       public Wheel wheel() &#123;          return new Wheel();      &#125;  &#125;\n\n上面的代码中，MybatisAutoConfiguration这个类，自动帮我们生成了SqlSessionFactory这些Mybatis的重要实例并交给spring容器管理，从而完成bean的自动注册。\n在Spring中还有很多这样的注解：@Component @Service @Controller …\n端点监控：（@待续）\n\n示例:一个简单的处理客户端请求案例\n\napplication.properties文件进行配置\n# ServerPropertiesserver.port&#x3D;8080         服务器端口server.servlet.context-path&#x3D;&#x2F;community  项目访问路径\n\n\n\n\n","categories":["讨论社区项目","编程笔记"],"tags":["Apache Maven","Spring","SpringBoot"]},{"title":"Python 爬虫 01-通用爬虫基本流程","url":"/2018/10/18/Python-%E7%88%AC%E8%99%AB-01-%E9%80%9A%E7%94%A8%E7%88%AC%E8%99%AB%E7%BB%93%E6%9E%84/","content":"爬虫是什么爬虫：一段自动抓取互联网信息的程序，从互联网上抓取对于我们有价值的信息。\n通用爬虫基本流程用一个通用的网络爬虫结构来说明网络爬虫的基本工作流程：\n\n网络爬虫的基本工作流程如下：\n(1).   首先抓取一部分待取的种子URL；\n(2).   将这些URL放入待取的URL队列；\n(3).   从待取的URL队列中读取待抓取网页的URL，解析DNS并且得到主机的IP，将URL对应的网页内容下载下来，存储已下载网页库中，并将这些URL放入已抓取URL队列；\n(4).   分析已抓取URL队列中的URL，从已下载的网页数据分析出其他URL冰河已抓取的URL进行对比去重，最后将去重后的URL放入待抓取队列，从而进入下一个循环。\n","categories":["编程笔记"],"tags":["爬虫"]}]