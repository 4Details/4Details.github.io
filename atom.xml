<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王旭的博客</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-30T15:52:19.688Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wangxu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>回文串引发的“血案”</title>
    <link href="http://yoursite.com/2020/08/28/%E5%9B%9E%E6%96%87%E4%B8%B2%E5%BC%95%E5%8F%91%E7%9A%84%E2%80%9C%E8%A1%80%E6%A1%88%E2%80%9D/"/>
    <id>http://yoursite.com/2020/08/28/%E5%9B%9E%E6%96%87%E4%B8%B2%E5%BC%95%E5%8F%91%E7%9A%84%E2%80%9C%E8%A1%80%E6%A1%88%E2%80%9D/</id>
    <published>2020-08-28T22:10:52.000Z</published>
    <updated>2020-08-30T15:52:19.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单枚举"><a href="#简单枚举" class="headerlink" title="简单枚举"></a>简单枚举</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于中心线枚举</span></span><br><span class="line">Class Solution:</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span>(<span class="params">self,s</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        self.start, self.longest = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> middle <span class="keyword">in</span> range(len(s)):</span><br><span class="line">            self.find_longest_palidrome_from(s, middle, middle)</span><br><span class="line">            self.find_longest_palidrome_from(s, middle, middle+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> s[self.start:self.start + self.longest]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_longest_palidrome_from</span>(<span class="params">self, s, left, right</span>):</span></span><br><span class="line">        <span class="keyword">while</span> left &gt;= <span class="number">0</span> <span class="keyword">and</span> right &lt; len(s) <span class="keyword">and</span> s[left] == s[right]:</span><br><span class="line">            left -= <span class="number">1</span></span><br><span class="line">            right += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.longest &lt; right -left <span class="number">-1</span>:</span><br><span class="line">            self.longest = right - left <span class="number">-1</span></span><br><span class="line">            self.start = left +<span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于动态规划（区间型：从小到大枚举区间）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        n = len(s)</span><br><span class="line">        is_palindrome = [[<span class="literal">False</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            is_palindrome[i][i] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">            is_palindrome[i][i<span class="number">-1</span>] = <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        start, longest = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> length <span class="keyword">in</span> range(<span class="number">2</span>, n<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(n - length + <span class="number">1</span>):</span><br><span class="line">                j = i + length <span class="number">-1</span></span><br><span class="line">                is_palindrome[i][j] = is_palindrome[i+<span class="number">1</span>][j<span class="number">-1</span>] <span class="keyword">and</span> s[i] == s[j]</span><br><span class="line">                <span class="keyword">if</span> is_palindrome[i][j] <span class="keyword">and</span> length &gt; longest:</span><br><span class="line">                    longest = length</span><br><span class="line">                    start = i</span><br><span class="line">         <span class="keyword">return</span> s[start:start + longest]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简单枚举&quot;&gt;&lt;a href=&quot;#简单枚举&quot; class=&quot;headerlink&quot; title=&quot;简单枚举&quot;&gt;&lt;/a&gt;简单枚举&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p</summary>
      
    
    
    
    <category term="算法笔记" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="回文串" scheme="http://yoursite.com/tags/%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    
    <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>FATE 1.2 实践02-FATE集群部署</title>
    <link href="http://yoursite.com/2020/08/27/FATE-1-2-%E5%AE%9E%E8%B7%B502%EF%BC%9AFATE%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2020/08/27/FATE-1-2-%E5%AE%9E%E8%B7%B502%EF%BC%9AFATE%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</id>
    <published>2020-08-27T13:49:03.000Z</published>
    <updated>2020-08-30T15:52:19.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置FATE环境"><a href="#配置FATE环境" class="headerlink" title="配置FATE环境"></a>配置FATE环境</h1><p>第1步中虚拟机创建完成后的信息如下</p><table><thead><tr><th>主机名</th><th>host155</th><th>guest156</th><th>guest157</th></tr></thead><tbody><tr><td>IP</td><td>192.168.119.155</td><td>192.168.119.156</td><td>192.168.119.157</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><p>下面的步骤均是依据官方文档操作 </p><h2 id="基础环境配置"><a href="#基础环境配置" class="headerlink" title="基础环境配置"></a>基础环境配置</h2><p>注意：不特殊说明，下面配置需要在所有机器上操作！！</p><p>由于在创建虚拟机过程中已经更改过每台主机名、创建用户app，所以文档中hostname配置可跳过。</p><p>root权限下创建文件夹  /data/projects 归属 app用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;切换root用户，-p创建文件夹，给app用户赋予权限</span><br><span class="line">su root</span><br><span class="line">mkdir -p &#x2F;data&#x2F;projects</span><br><span class="line">chown -R app &#x2F;data&#x2F;projects</span><br></pre></td></tr></table></figure><h3 id="关闭selinux"><a href="#关闭selinux" class="headerlink" title="关闭selinux"></a>关闭selinux</h3><p>确认是否已安装selinux</p><p>centos系统执行：rpm -qa | grep selinux</p><p>ubuntu系统执行：apt list –installed | grep selinux</p><p>如果已安装了selinux就执行：setenforce 0</p><p><img src="https://i2.tiimg.com/726074/1ffc89980ab43ca6.png" alt="关闭selinux"></p><h3 id="修改Linux最大打开文件数"><a href="#修改Linux最大打开文件数" class="headerlink" title="修改Linux最大打开文件数"></a>修改Linux最大打开文件数</h3><p>切换root用户，在limits.conf文件最后添加5、6行代码，保存退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line"></span><br><span class="line">vim &#x2F;etc&#x2F;security&#x2F;limits.conf</span><br><span class="line"></span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br></pre></td></tr></table></figure><p><img src="https://i2.tiimg.com/726074/2e80d0e8b8f1b7aa.png" alt="编辑最大打开文件数"></p><h3 id="添加主机映射"><a href="#添加主机映射" class="headerlink" title="添加主机映射"></a>添加主机映射</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;hosts</span><br></pre></td></tr></table></figure><p><img src="https://i2.tiimg.com/726074/bb54d423f32f45d0.png" alt="添加主机映射"></p><h3 id="关闭虚拟机防火墙"><a href="#关闭虚拟机防火墙" class="headerlink" title="关闭虚拟机防火墙"></a>关闭虚拟机防火墙</h3><p>在实际生产环境中需要配置防火墙端口规则！虚拟机环境下采用关闭防火墙的方式。</p><p>如果是Centos系统：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable firewalld.service</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl status firewalld.service</span><br></pre></td></tr></table></figure><p>本例的环境是Centos系统</p><p><img src="https://i2.tiimg.com/726074/556664f24d0921ef.png" alt="关闭虚拟机防火墙"></p><p>如果是Ubuntu系统：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ufw disable</span><br><span class="line">ufw status</span><br></pre></td></tr></table></figure><h3 id="给用户赋予sudo权限"><a href="#给用户赋予sudo权限" class="headerlink" title="给用户赋予sudo权限"></a>给用户赋予sudo权限</h3><p>root用户下对app用户赋予sudo权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;sudoers.d&#x2F;app</span><br><span class="line"></span><br><span class="line">app ALL&#x3D;(ALL) ALL</span><br><span class="line">app ALL&#x3D;(ALL) NOPASSWD: ALL</span><br><span class="line">Defaults !env_reset</span><br></pre></td></tr></table></figure><h3 id="配置ssh远程登录"><a href="#配置ssh远程登录" class="headerlink" title="配置ssh远程登录"></a>配置ssh远程登录</h3><p><strong>a. 切换app用户，生成rsa_id，具体根据下面代码</strong></p><p><img src="https://i2.tiimg.com/726074/42d5722d58facb33.png" alt="配置ssh登录01"></p><p><strong>b.合并id_rsa_pub文件</strong></p><p><strong>步骤如下：三台机器分别将id_rsa.pub 写入authorized_keys文件中并且赋予权限chomd 600</strong></p><p><img src="https://i2.tiimg.com/726074/e77b099df3e5875a.png" alt="配置ssh登录02"></p><p>155通过scp将authorized_keys文件发送到156上，并将156的id_rsa.pub文件写入，然后将生成的新文件发送至157上，并且写入157生成的id_rsa.pub文件，将最终生成的authorized_keys文件发送给155和156，此时通过ssh即可登录（在发送文件过程中建立连接需要输入密码）</p><p>155-&gt;156</p><p><img src="https://i2.tiimg.com/726074/adf0d7c9e4b5a816.png" alt="155-&gt;156"></p><p>156写入， -&gt;157</p><p><img src="https://i2.tiimg.com/726074/1face612066cd770.png" alt="156-&gt;157"></p><p>157写入，-&gt;155  -&gt;156</p><p><img src="https://i2.tiimg.com/726074/76290d4bf4c62660.png" alt="157-&gt;155 156"></p><p><strong>上述完成之后即可通过  ssh usernane@ip访问某台虚拟机</strong></p><p>需要注意的是，访问自身需要重新建立一个连接。</p><p>建议配置以上步骤之后拍摄虚拟机快照，便于后期恢复重新部署。</p><h2 id="FATE部署"><a href="#FATE部署" class="headerlink" title="FATE部署"></a>FATE部署</h2><p>完成基础环境配置之后，接下来就需要部署FATE的运行环境，本例使用的是<a href="https://github.com/FederatedAI/FATE/blob/master/cluster-deploy/doc/Fate-cluster_deployment_guide_install_zh.md">Installation</a>文档。</p><p>下面的操作<strong>只需在其中一台机器操作即可</strong>，本例选用的是host 155。</p><h3 id="下载压缩包"><a href="#下载压缩包" class="headerlink" title="下载压缩包"></a>下载压缩包</h3><p>可以使用wget下载，也可以直接通过<a href="https://webank-ai-1251170195.cos.ap-guangzhou.myqcloud.com/FATE_install_v1.2.0.tar.gz">链接</a>下载。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;data&#x2F;projects</span><br><span class="line">wget https:&#x2F;&#x2F;webank-ai-1251170195.cos.ap-guangzhou.myqcloud.com&#x2F;FATE_install_v1.2.0.tar.gz</span><br><span class="line">tar -xf FATE_install_v1.2.0.tar.gz</span><br></pre></td></tr></table></figure><p><img src="https://i2.tiimg.com/726074/c119001e5577e31a.png" alt="下载压缩包并解压"></p><h3 id="修改configuration文件"><a href="#修改configuration文件" class="headerlink" title="修改configuration文件"></a>修改configuration文件</h3><p>可以使用vim，也可以直接使用编辑器打开并修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;data&#x2F;projects&#x2F;FATE&#x2F;cluster-deploy&#x2F;script</span><br><span class="line">vi multinode_cluster_configuration.sh</span><br></pre></td></tr></table></figure><p><img src="https://i2.tiimg.com/726074/bd4b622b82444ffd.png" alt="修改conf文件"></p><p><img src="https://i2.tiimg.com/726074/c2aca491c2558507.png" alt="b端配置"></p><p>建议在部署之前拍摄快照，为防止在部署过程中因某些配置出错造成部署失败。</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>本例中选择在各机器上部署所有组件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd FATE&#x2F;cluster-deploy&#x2F;scripts</span><br><span class="line"># 部署所有组件</span><br><span class="line">bash deploy_cluster_multinode.sh binary all </span><br><span class="line"># 只部署部分组件(可选：jdk python mysql redis fate_flow federatedml fateboard proxy federation roll meta-service egg)：</span><br><span class="line">bash deploy_cluster_multinode.sh binary fate_flow</span><br></pre></td></tr></table></figure><p>-———————————————————————————————————————-</p><p>———————————————–漫长地等待过程——————————————————–</p><p>-———————————————————————————————————————-</p><p>（部署时间暂未统计，时间需要2-4个小时，记录下了部署过程中终端产生的日志）</p><p>此处为语雀文档，点击链接查看：<a href="https://www.yuque.com/u190689/qoiq3w/seeq38">https://www.yuque.com/u190689/qoiq3w/seeq38</a></p><h2 id="配置检查"><a href="#配置检查" class="headerlink" title="配置检查"></a>配置检查</h2><p>请务必详细对照检查！！！</p><p>到各个目标服务器上进行检查对应模块的配置是否准确，每个模块的对应配置文件所在路径可在此配置文件下查看，参考：<a href="https://github.com/FederatedAI/FATE/blob/master/cluster-deploy/doc/configuration.md">https://github.com/FederatedAI/FATE/blob/master/cluster-deploy/doc/configuration.md</a></p><p>至此，FATE v1.2的安装部署全部结束，接下来测试环境。</p><p>建议部署成功之后拍摄快照，便于将来找到还原点。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;配置FATE环境&quot;&gt;&lt;a href=&quot;#配置FATE环境&quot; class=&quot;headerlink&quot; title=&quot;配置FATE环境&quot;&gt;&lt;/a&gt;配置FATE环境&lt;/h1&gt;&lt;p&gt;第1步中虚拟机创建完成后的信息如下&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th</summary>
      
    
    
    
    <category term="联邦学习" scheme="http://yoursite.com/categories/%E8%81%94%E9%82%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="FATE" scheme="http://yoursite.com/tags/FATE/"/>
    
    <category term="FL" scheme="http://yoursite.com/tags/FL/"/>
    
  </entry>
  
  <entry>
    <title>FATE 1.2 实践01-虚拟机安装</title>
    <link href="http://yoursite.com/2020/08/27/FATE-1-2-%E5%AE%9E%E8%B7%B501%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2020/08/27/FATE-1-2-%E5%AE%9E%E8%B7%B501%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85/</id>
    <published>2020-08-27T10:10:29.000Z</published>
    <updated>2020-08-30T15:52:19.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h1><h2 id="新建虚拟机"><a href="#新建虚拟机" class="headerlink" title="新建虚拟机"></a>新建虚拟机</h2><p>使用VMWare WorkStation创建虚拟机（单机版只需要一台机器，集群版可以使用多台机器，下面示例中创建了3台虚拟机，配置均为 300G，16GB，4核处理器，系统镜像为 CentOS-7-x86_64-DVD-1810版本）</p><p><img src="https://i2.tiimg.com/726074/89154bfc28d26208.png" alt="新建向导1-创建包含空白硬盘的虚拟机"></p><p><img src="https://i2.tiimg.com/726074/c4f11c041dc337fa.png" alt="新建向导2-选择客户机操作系统"></p><p><img src="https://i2.tiimg.com/726074/1eaf6ac021042136.png" alt="新建向导3-命名虚拟机"></p><p><img src="https://i2.tiimg.com/726074/18eb58f7c246e1bd.png" alt="新建向导4-指定磁盘容量">                         </p><p><img src="https://i2.tiimg.com/726074/c61093a659d32204.png" alt="新建向导5-配置硬件信息"></p><p><img src="https://i2.tiimg.com/726074/df56b15fb12f2fc7.png" alt="新建向导5-配置硬件信息"></p><p><img src="https://i2.tiimg.com/726074/a5708abe2935f37f.png" alt="虚拟机详细配置信息">                                       </p><h2 id="配置操作系统"><a href="#配置操作系统" class="headerlink" title="配置操作系统"></a>配置操作系统</h2><p><strong>启动虚拟机，加载并配置操作系统</strong></p><p><img src="https://i2.tiimg.com/726074/65977403c14d0be4.png" alt="选择默认语言">     </p><p>  <img src="https://i2.tiimg.com/726074/c1b032023a455553.png" alt="image.png"></p><p>此处选择默认语言为【简体中文】，可以直接在编辑框输入快速查找。下一步则需要配置系统的软件、磁盘分区、网络等信息。</p><p><img src="https://i2.tiimg.com/726074/07cb7dde684ceed8.png" alt="详细配置"></p><p>这里需要注意的是详细配置图中标注的1，2，3。本例中详细的配置如下：</p><p><img src="https://i2.tiimg.com/726074/bb8187d72aac1f05.png" alt="软件选择"></p><p>本例中选择的是GNOME桌面版的软件，已选环境附加选项可根据实际需要选择，选择桌面版的可视化环境有利于后续工作的进行。下一步选择安装目标位置中提前配置分区信息尤为重要！！！</p><p><img src="https://i2.tiimg.com/726074/6d2573e8d831fbfe.png" alt="安装目标位置1-重新配置分区"></p><p><img src="https://i2.tiimg.com/726074/6660030a861e7450.png" alt="安装目标位置2-选择自动创建分区"></p><p><img src="https://i2.tiimg.com/726074/775d2f261664aa51.png" alt="安装目标位置3-重新配置分区磁盘"></p><p>官方文档中建议全部磁盘挂载到新建的用户app下，但是本例中将大部分磁盘挂载到root下，经实践是有效的，在如上配置之后点击【完成】即可完成磁盘及分区的配置。</p><p>下一步需要提前完成系统网络信息的配置，如主机名、ip、子网掩码、DNS、路由信息等。</p><p><img src="https://i2.tiimg.com/726074/0bbcf0a30e5a05c1.png" alt="配置主机名"></p><p>点击【配置】可进入ip、DNS等信息的配置。</p><p><img src="https://i2.tiimg.com/726074/34d23c8ae8c7d96f.png" alt="网络信息详细配置"></p><p>在上图的配置中需要注意的是，选择手动配置IPv4的信息，地址、子网掩码和网关需要配置正确，本例中DNS服务器默认为网关信息。网络信息配置完成之后可以【开启】以太网的连接，详细的信息可以参考下图</p><p><img src="https://i2.tiimg.com/726074/0a5251eeb05aaf7d.png" alt="网络配置详细信息"></p><p>1，2，3的所有信息完成配置之后点击【开始安装】则进入安装界面，此时可以配置系统root用户的密码以及新建用户。本例中遵循官方文档创建用户 app，在“高级用户配置”中，编辑app分属apps组，用户id为6000。</p><p><img src="https://i2.tiimg.com/726074/5b9f20707763fb54.png" alt="安装进度页面"></p><p><img src="https://i2.tiimg.com/726074/211dae0da29db0ae.png" alt="高级用户配置"></p><p>等待安装完成，【重启】即可进入桌面版的centos7 操作系统。</p><p><img src="https://i2.tiimg.com/726074/c22f8cb802262f87.png" alt="等待重启"></p><p>初始设置需要接受许可证协议，【完成配置】即可登录输入密码，进入系统。</p><p><img src="https://i2.tiimg.com/726074/a634908789cbb0a6.png" alt="许可证"></p><p><strong>提示：</strong>在实际操作中无需一步步按照上述步骤创建三台或多台虚拟机，在创建完成一台虚拟机之后可以通过“克隆”操作得到已安装完成的虚拟机镜像，这样可以在一定程度上节约创建虚拟机的时间，需要注意的是，在克隆完成启动之前需要重新生成机器的mac地址，否则会造成mac冲突。因为原始虚拟机使用的是静态地址，所以在开启之后需要重新对副本虚拟机分配静态IP。</p><p>克隆方法主要是： 点击 <strong>虚拟机-管理-克隆</strong>  使用克隆虚拟机向导</p><p><img src="https://i2.tiimg.com/726074/cc8c06ec9306c7ee.png" alt="克隆虚拟机01"></p><p><img src="https://i2.tiimg.com/726074/f4890c2edc6d3bb3.png" alt="克隆虚拟机02"></p><p><img src="https://i2.tiimg.com/726074/194b776452661499.png" alt="克隆虚拟机03"></p><p><strong>重命名和选择虚拟机所在路径之后点击【完成】即可。</strong></p><p><img src="https://i2.tiimg.com/726074/7231414d603260c5.png" alt="重命名01"></p><p><img src="https://i2.tiimg.com/726074/589d26d2952860c4.png" alt="重命名02"></p><p><img src="https://i2.tiimg.com/726074/bd2662f83ef7ce1c.png" alt="克隆完成后的配置"></p><p>打开虚拟机之后可以使用  ifconfig查看网络配置信息</p><p><img src="https://i2.tiimg.com/726074/dad1a31fd9322fe7.png" alt="查看配置"></p><p>需要更改的信息有 主机名、ip</p><p><img src="https://i2.tiimg.com/726074/50130340c6d9654e.png" alt="修改信息01"></p><p>配置IP信息主要路径在 /etc/sysconfig/network-script，修改 sysconf-ens33 （ens33指的是网卡名称）</p><p>文件中可以修改的有是否静态ip，PROTO一项改为 static  配置ip地址，子网掩码，网关，dns</p><p><img src="https://i2.tiimg.com/726074/666c8e958b48f118.png" alt="修改信息02"></p><p>进入编辑页面</p><p><img src="https://i2.tiimg.com/726074/301894f1f186c05c.png" alt="修改信息03"></p><p>半角状态输入’i’可修改内容，修改完成如下，Esc退出编辑，”:wq”可以保存修改并退出vim编辑页面</p><p><img src="https://i2.tiimg.com/726074/769a038f27cc4adb.png" alt="修改信息04"></p><p>重启之后使用ifconfig查看，ip已经改变。</p><p>克隆得到另外两台虚拟机，按上述步骤修改IP信息之后即完成了本例中的创建虚拟机步骤。</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;创建虚拟机&quot;&gt;&lt;a href=&quot;#创建虚拟机&quot; class=&quot;headerlink&quot; title=&quot;创建虚拟机&quot;&gt;&lt;/a&gt;创建虚拟机&lt;/h1&gt;&lt;h2 id=&quot;新建虚拟机&quot;&gt;&lt;a href=&quot;#新建虚拟机&quot; class=&quot;headerlink&quot; title=&quot;新建虚</summary>
      
    
    
    
    <category term="联邦学习" scheme="http://yoursite.com/categories/%E8%81%94%E9%82%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="FATE" scheme="http://yoursite.com/tags/FATE/"/>
    
    <category term="FL" scheme="http://yoursite.com/tags/FL/"/>
    
  </entry>
  
  <entry>
    <title>HashMap解析</title>
    <link href="http://yoursite.com/2020/08/22/HashMap%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2020/08/22/HashMap%E8%A7%A3%E6%9E%90/</id>
    <published>2020-08-22T23:25:32.000Z</published>
    <updated>2020-08-30T15:52:19.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HashMap继承体系"><a href="#HashMap继承体系" class="headerlink" title="HashMap继承体系"></a>HashMap继承体系</h1><p><img src="http://i1.fuimg.com/726074/1872c236e17296ec.png" alt="HashMap继承体系"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HashMap继承体系&quot;&gt;&lt;a href=&quot;#HashMap继承体系&quot; class=&quot;headerlink&quot; title=&quot;HashMap继承体系&quot;&gt;&lt;/a&gt;HashMap继承体系&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://i1.fuimg.com/7260</summary>
      
    
    
    
    
    <category term="HashMap" scheme="http://yoursite.com/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>讨论社区32  -  发送、显示系统通知</title>
    <link href="http://yoursite.com/2019/08/05/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA32%20-%20%E5%8F%91%E9%80%81%E3%80%81%E6%98%BE%E7%A4%BA%E7%B3%BB%E7%BB%9F%E9%80%9A%E7%9F%A5/"/>
    <id>http://yoursite.com/2019/08/05/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA32%20-%20%E5%8F%91%E9%80%81%E3%80%81%E6%98%BE%E7%A4%BA%E7%B3%BB%E7%BB%9F%E9%80%9A%E7%9F%A5/</id>
    <published>2019-08-05T23:38:50.000Z</published>
    <updated>2020-08-30T15:52:19.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="发送系统通知"><a href="#发送系统通知" class="headerlink" title="发送系统通知"></a>发送系统通知</h1><ul><li>触发事件<ul><li>评论后，发布通知</li><li>点赞后，发布通知</li><li>关注后，发布通知</li></ul></li><li>处理事件<ul><li>封装事件对象</li><li>开发事件的生产者</li><li>开发事件的消费者</li></ul></li></ul><h1 id="显示系统通知"><a href="#显示系统通知" class="headerlink" title="显示系统通知"></a>显示系统通知</h1><ul><li><p>通知列表</p><ul><li>显示评论、点赞、关注三种类型的通知</li></ul><p>统一处理三种类型的通知</p></li><li><p>通知详情</p><ul><li>分页显示某一类主题所包含的通知</li></ul></li><li><p>未读消息</p><ul><li>在页面头部显示所有的未读消息数量</li></ul><p>用拦截器处理，要注册拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HostHolder hostHolder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageService messageService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        User user = hostHolder.getUser();</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="keyword">null</span> &amp;&amp; modelAndView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> letterUnreadCount = messageService.findLetterUnreadCount(user.getId(), <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">int</span> noticeUnreadCount = messageService.findNoticeUnreadCount(user.getId(), <span class="keyword">null</span>);</span><br><span class="line">            modelAndView.addObject(<span class="string">&quot;allUnreadCount&quot;</span>, letterUnreadCount + noticeUnreadCount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;发送系统通知&quot;&gt;&lt;a href=&quot;#发送系统通知&quot; class=&quot;headerlink&quot; title=&quot;发送系统通知&quot;&gt;&lt;/a&gt;发送系统通知&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;触发事件&lt;ul&gt;
&lt;li&gt;评论后，发布通知&lt;/li&gt;
&lt;li&gt;点赞后，发布通知&lt;/li&gt;
&lt;li</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="Kafka" scheme="http://yoursite.com/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>讨论社区31  -  Spring整合Kafka</title>
    <link href="http://yoursite.com/2019/08/04/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA31%20-%20Spring%E6%95%B4%E5%90%88Kafka/"/>
    <id>http://yoursite.com/2019/08/04/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA31%20-%20Spring%E6%95%B4%E5%90%88Kafka/</id>
    <published>2019-08-04T22:23:32.000Z</published>
    <updated>2020-08-30T15:52:19.688Z</updated>
    
    <content type="html"><![CDATA[<ul><li>引入依赖<ul><li>spring-kafka</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置Kafka<ul><li>配置server、consumer</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># KafkaProperties</span><br><span class="line">spring.kafka.bootstrap-servers=localhost:9092</span><br><span class="line"># kafka/config下consumer.properties，默认group-id是test-consumer-group</span><br><span class="line">spring.kafka.consumer.group-id=talking-consumer-group</span><br><span class="line">spring.kafka.consumer.enable-auto-commit=true</span><br><span class="line">spring.kafka.consumer.auto-commit-interval=3000</span><br></pre></td></tr></table></figure><ul><li>访问Kafka<ul><li>生产者<br><code>kafkaTemplate.send(topic, data);</code></li><li>消费者<br><code>@KafkaListener(topics = &#123;&quot;test&quot;&#125;)</code><br><code>public void handleMessage(ConsumerRecord record) &#123;&#125;</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.annotation.KafkaListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.core.KafkaTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = TalkingApplication.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaProducer kafkaProducer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testKafka</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        kafkaProducer.sendMessage(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        kafkaProducer.sendMessage(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;在吗&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span> * <span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KafkaProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String topic, String content)</span> </span>&#123;</span><br><span class="line">        kafkaTemplate.send(topic, content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KafkaConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@KafkaListener(topics = &#123;&quot;test&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(ConsumerRecord record)</span> </span>&#123;</span><br><span class="line">        System.out.println(record.value());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;引入依赖&lt;ul&gt;
&lt;li&gt;spring-kafka&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
    <category term="Kafka" scheme="http://yoursite.com/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>讨论社区30  -  Kafka入门</title>
    <link href="http://yoursite.com/2019/08/03/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA30%20-%20Kafka%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2019/08/03/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA30%20-%20Kafka%E5%85%A5%E9%97%A8/</id>
    <published>2019-08-03T23:25:32.000Z</published>
    <updated>2020-08-30T15:52:19.688Z</updated>
    
    <content type="html"><![CDATA[<p>本项目中仅使用Kafka的消息系统</p><ul><li>Kafka简介<ul><li>Kafka是一个分布式的流媒体平台。</li><li>应用：消息系统、日志收集、用户行为追踪、流式处理。</li></ul></li><li>Kafka特点<ul><li>高吞吐量、消息持久化、高可靠性、高扩展性。</li></ul></li><li>Kafka术语<ul><li>Broker、Zookeeper</li><li>Topic、Partition、Offset</li><li>Leader Replica 、Follower Replica</li></ul></li></ul><p>下载地址：<a href="http://kafka.apache.org/downloads">http://kafka.apache.org/downloads</a></p><p>解压缩之后需要更改一些配置</p><p>windows 启动zookeeper和kafka（windows下启动报错，可以尝试直接删除日志文件夹重新启动）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zookeeper-server-start.bat d:\software\kafka_2.12-2.3.0\config\zookeeper.properties</span><br><span class="line"></span><br><span class="line">kafka-server-start.bat d:\software\kafka_2.12-2.3.0\config\server.properties</span><br></pre></td></tr></table></figure><p><img src="http://i2.tiimg.com/726074/f09da785476dd516.jpg" alt="windows启动zookeeper"></p><p><img src="http://i2.tiimg.com/726074/6e268e5245a0e8f8.jpg" alt="window启动kafka"></p><p>创建一个test主题 分区</p><p><img src="http://i2.tiimg.com/726074/aa14267742462333.png" alt="1598792421476"></p><p>查询是否创建成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\software\kafka_2.12-2.3.0\bin\windows&gt;kafka-topics.bat --list --bootstrap-server localhost:9092</span><br><span class="line">test</span><br></pre></td></tr></table></figure><p>生产者生产消息（重新开生产者终端）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D:\software\kafka_2.12-2.3.0\bin\windows&gt;kafka-console-producer.bat --broker-list localhost:9092 --topic test</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">hi</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">hello world</span></span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><p>消费者消费消息（重新开消费者终端）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从头开始消费</span></span><br><span class="line">D:\software\kafka_2.12-2.3.0\bin\windows&gt;kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic test --from-beginning</span><br><span class="line">hi</span><br><span class="line">hello world</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本项目中仅使用Kafka的消息系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kafka简介&lt;ul&gt;
&lt;li&gt;Kafka是一个分布式的流媒体平台。&lt;/li&gt;
&lt;li&gt;应用：消息系统、日志收集、用户行为追踪、流式处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kafka特点&lt;ul&gt;
&lt;li</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="Kafka" scheme="http://yoursite.com/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>讨论社区29  -  阻塞队列</title>
    <link href="http://yoursite.com/2019/08/01/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA29%20-%20%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/"/>
    <id>http://yoursite.com/2019/08/01/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA29%20-%20%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/</id>
    <published>2019-08-01T22:35:02.000Z</published>
    <updated>2020-08-30T15:52:19.688Z</updated>
    
    <content type="html"><![CDATA[<p>BlockingQueue</p><ul><li>解决线程通信的问题。</li></ul><blockquote><p>传统解决线程通信问题也可以使用Object中的 <code>wait()</code>,<code>notify()</code>方法等</p></blockquote><ul><li>阻塞方法：put、take。</li></ul><p><img src="http://i1.fuimg.com/726074/05b790052f18efcb.png" alt="阻塞队列"></p><ul><li><p>生产者消费者模式</p><p>没有缓存区域（阻塞队列），生产者和消费者速率不一致，会浪费CPU资源（生产&gt;消费？ 生产&lt;消费？）</p><blockquote><p>阻塞队列满了，生产者线程阻塞暂停生产，等待消费；阻塞队列空了，消费者线程阻塞暂停消费，等待生产。</p></blockquote></li></ul><ul><li>生产者：产生数据的线程。</li><li>消费者：使用数据的线程。</li></ul><ul><li><p>实现类</p><ul><li><code>ArrayBlockingQueue</code></li><li><code>LinkedBlockingQueue</code></li><li><code>PriorityBlockingQueue</code>、<code>SynchronousQueue</code>、<code>DelayQueue</code>等。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  ArrayBlockingQueue 实现类 demo</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockingQueueTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BlockingQueue queue = <span class="keyword">new</span> ArrayBlockingQueue(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Producer(queue)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Consumer(queue)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Consumer(queue)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Consumer(queue)).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义生产者的类，继承线程 Runnable接口，实现 run() 方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BlockingQueue&lt;Integer&gt; queue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(BlockingQueue&lt;Integer&gt; queue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queue = queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                Thread.sleep(<span class="number">20</span>);</span><br><span class="line">                queue.put(i);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;生产:&quot;</span> + queue.size());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义消费者的类，继承线程 Runnable接口，实现 run() 方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BlockingQueue&lt;Integer&gt; queue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(BlockingQueue&lt;Integer&gt; queue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queue = queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">1000</span>)); <span class="comment">//消费者消费较慢</span></span><br><span class="line">                queue.take();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;消费:&quot;</span> + queue.size());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;BlockingQueue&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决线程通信的问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;传统解决线程通信问题也可以使用Object中的 &lt;code&gt;wait()&lt;/code&gt;,&lt;code&gt;notify()&lt;/code&gt;方法等&lt;/p&gt;</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>讨论社区28  -  优化登录模块</title>
    <link href="http://yoursite.com/2019/07/31/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA28%20-%20%E4%BC%98%E5%8C%96%E7%99%BB%E5%BD%95%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2019/07/31/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA28%20-%20%E4%BC%98%E5%8C%96%E7%99%BB%E5%BD%95%E6%A8%A1%E5%9D%97/</id>
    <published>2019-07-31T21:30:20.000Z</published>
    <updated>2020-08-30T15:52:19.688Z</updated>
    
    <content type="html"><![CDATA[<p>前面临时方案将验证码存储进Session，分布式部署场景会存在Session同步和共享的问题。</p><ul><li>使用Redis存储验证码<ul><li>验证码需要频繁的访问与刷新，对性能要求较高。</li><li>验证码不需永久保存，通常在很短的时间后就会失效。</li><li>分布式部署时，绕过<code>Session</code>共享的问题。</li></ul></li></ul><ul><li>使用Redis存储登录凭证<ul><li>处理每次请求时，都要查询用户的登录凭证，访问的频率非常高。</li></ul></li></ul><blockquote><p>登录凭证使用频率高，关系型数据库存储登录凭证，每一次都要重新查询，影响性能。</p></blockquote><p>重构 <code>UserService</code>   登录成功保存凭证，退出时需删除凭证，查询凭证</p><blockquote><p>退出删除并不是真的删除，而是将登录凭证的状态值改为1，为将来扩展预留。如第一次登录？</p></blockquote><ul><li>使用Redis缓存用户信息<ul><li>处理每次请求时，都要根据凭证查询用户信息，访问的频率非常高。</li></ul></li></ul><p>重构 <code>UserService</code></p><p>查询过程：尝试从缓存中取值，若取不到说明没有初始化进Redis中，需要初始化。</p><p>​        改变用户数据之后，需要更新缓存：1.更新缓存，更新操作麻烦且可能存在用户数据并发的问题；2.删除缓存，下一次请求重新初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.优先从缓存中取值</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> User <span class="title">getCache</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    String redisKey = RedisKeyUtil.getUserKey(userId);</span><br><span class="line">    <span class="keyword">return</span> (User) redisTemplate.opsForValue().get(redisKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.取不到时初始化缓存数据</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> User <span class="title">initCache</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    User user = userMapper.selectById(userId);</span><br><span class="line">    String redisKey = RedisKeyUtil.getUserKey(userId);</span><br><span class="line">    redisTemplate.opsForValue().set(redisKey, user, <span class="number">3600</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.数据变更时清除缓存数据</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearCache</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">    String redisKey = RedisKeyUtil.getUserKey(userId);</span><br><span class="line">    redisTemplate.delete(redisKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前面临时方案将验证码存储进Session，分布式部署场景会存在Session同步和共享的问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用Redis存储验证码&lt;ul&gt;
&lt;li&gt;验证码需要频繁的访问与刷新，对性能要求较高。&lt;/li&gt;
&lt;li&gt;验证码不需永久保存，通常在很短的时间后就会失效</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>讨论社区27  -  关注相关功能实现</title>
    <link href="http://yoursite.com/2019/07/29/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA27%20-%20%E5%85%B3%E6%B3%A8%E5%92%8C%E5%8F%96%E6%B6%88%E5%85%B3%E6%B3%A8%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/07/29/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA27%20-%20%E5%85%B3%E6%B3%A8%E5%92%8C%E5%8F%96%E6%B6%88%E5%85%B3%E6%B3%A8%E5%AE%9E%E7%8E%B0/</id>
    <published>2019-07-29T22:43:20.000Z</published>
    <updated>2020-08-30T15:52:19.688Z</updated>
    
    <content type="html"><![CDATA[<p>开发时应考虑性能问题：用户关注另一用户、帖子等，如何做到实时响应，实时获取？</p><p>——数据存到Redis中，提升性能。</p><p>为什么使用Redis实现这个功能？</p><h1 id="关注、取消关注"><a href="#关注、取消关注" class="headerlink" title="关注、取消关注"></a>关注、取消关注</h1><ul><li>需求<ul><li>开发关注、取消关注功能。</li><li>统计用户的关注数、粉丝数。</li></ul></li><li>关注<ul><li>若A关注了B，则A是B的Follower（粉丝），B是A的Followee（目标）。</li><li>关注的目标可以是用户、帖子、题目等，在实现时将这些目标抽象为实体。</li></ul></li></ul><h1 id="关注列表、粉丝列表"><a href="#关注列表、粉丝列表" class="headerlink" title="关注列表、粉丝列表"></a>关注列表、粉丝列表</h1><ul><li>业务层<ul><li>查询某个用户关注的人，支持分页。</li><li>查询某个用户的粉丝，支持分页。</li></ul></li><li>表现层<ul><li>处理“查询关注的人”、“查询粉丝”请求。</li><li>编写“查询关注的人”、“查询粉丝”模板。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;开发时应考虑性能问题：用户关注另一用户、帖子等，如何做到实时响应，实时获取？&lt;/p&gt;
&lt;p&gt;——数据存到Redis中，提升性能。&lt;/p&gt;
&lt;p&gt;为什么使用Redis实现这个功能？&lt;/p&gt;
&lt;h1 id=&quot;关注、取消关注&quot;&gt;&lt;a href=&quot;#关注、取消关注&quot; class=&quot;</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>讨论社区26  -  点赞功能和收到赞实现</title>
    <link href="http://yoursite.com/2019/07/28/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA26%20-%20%E7%82%B9%E8%B5%9E%E5%8A%9F%E8%83%BD%E5%92%8C%E6%94%B6%E5%88%B0%E8%B5%9E%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/07/28/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA26%20-%20%E7%82%B9%E8%B5%9E%E5%8A%9F%E8%83%BD%E5%92%8C%E6%94%B6%E5%88%B0%E8%B5%9E%E5%AE%9E%E7%8E%B0/</id>
    <published>2019-07-28T20:14:22.000Z</published>
    <updated>2020-08-30T15:52:19.688Z</updated>
    
    <content type="html"><![CDATA[<p>开发时应考虑性能问题：很多用户对同一帖子或回复点赞。——数据存到Redis中，提升性能。</p><p>为什么使用Redis实现这个功能？</p><h1 id="点赞"><a href="#点赞" class="headerlink" title="点赞"></a>点赞</h1><ul><li>点赞<ul><li>支持对帖子、评论点赞。</li><li>第1次点赞，第2次取消点赞。</li></ul></li><li>首页点赞数量<ul><li>统计帖子的点赞数量。</li></ul></li><li>详情页点赞数量<ul><li>统计点赞数量。</li><li>显示点赞状态。</li></ul></li></ul><p>无需再写DAO层，直接在Service实现，然后通过RedisConfig文件操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="我收到的赞"><a href="#我收到的赞" class="headerlink" title="我收到的赞"></a>我收到的赞</h1><p>可以基于上面的点赞数据实现去统计，但是需要统计所有帖子，然后针对帖子去统计赞，业务繁杂。</p><p>一般采用下面的方式：</p><ul><li>重构点赞功能<ul><li>以用户为key，记录点赞数量</li><li>increment(key)，decrement(key)</li></ul></li></ul><ul><li>开发个人主页<ul><li>以用户为key，查询点赞数量</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;开发时应考虑性能问题：很多用户对同一帖子或回复点赞。——数据存到Redis中，提升性能。&lt;/p&gt;
&lt;p&gt;为什么使用Redis实现这个功能？&lt;/p&gt;
&lt;h1 id=&quot;点赞&quot;&gt;&lt;a href=&quot;#点赞&quot; class=&quot;headerlink&quot; title=&quot;点赞&quot;&gt;&lt;/a&gt;点赞&lt;</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>讨论社区25  -  Spring整合Redis</title>
    <link href="http://yoursite.com/2019/07/27/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA25%20-%20Spring%E6%95%B4%E5%90%88Redis/"/>
    <id>http://yoursite.com/2019/07/27/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA25%20-%20Spring%E6%95%B4%E5%90%88Redis/</id>
    <published>2019-07-27T22:15:41.000Z</published>
    <updated>2020-08-30T15:52:19.688Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>引入依赖</p><ul><li><code>spring-boot-starter-data-redis</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--包含在spring boot中可以不用写VersionId，已做好兼容--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置Redis</p><ul><li>配置数据库参数</li><li>编写配置类，构造RedisTemplate</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># RedisProperties</span><br><span class="line">spring.redis.database=1</span><br><span class="line">spring.redis.host=localhost</span><br><span class="line">spring.redis.port=6379</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span></span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt;  template = <span class="keyword">new</span> RedisTemplate&lt;String, Object&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置key的序列化方式</span></span><br><span class="line">        template.setKeySerializer(RedisSerializer.string());</span><br><span class="line">        <span class="comment">// 设置value的序列化方式</span></span><br><span class="line">        template.setValueSerializer(RedisSerializer.json());</span><br><span class="line">        <span class="comment">// 设置hash的key的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(RedisSerializer.string());</span><br><span class="line">        <span class="comment">// 设置hash的value的序列化方式</span></span><br><span class="line">        template.setHashValueSerializer(RedisSerializer.json());</span><br><span class="line"></span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>访问Redis</p><ul><li><code>redisTemplate.opsForValue()</code></li><li><code>redisTemplate.opsForHash()</code></li><li><code>redisTemplate.opsForList()</code></li><li><code>redisTemplate.opsForSet()</code></li><li><code>redisTemplate.opsForZSet()</code></li></ul></li></ul><p>多次访问一个redisKey可以做绑定操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多次访问同一个key</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBoundOperations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String redisKey = <span class="string">&quot;test:count&quot;</span>;</span><br><span class="line">    BoundValueOperations operations = redisTemplate.boundValueOps(redisKey);</span><br><span class="line">    operations.increment();</span><br><span class="line">    operations.increment();</span><br><span class="line">    operations.increment();</span><br><span class="line">    operations.increment();</span><br><span class="line">    operations.increment();</span><br><span class="line">    System.out.println(operations.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Redis的事务处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编程式事务</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransactional</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Object obj = redisTemplate.execute(<span class="keyword">new</span> SessionCallback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">execute</span><span class="params">(RedisOperations operations)</span> <span class="keyword">throws</span> DataAccessException </span>&#123;</span><br><span class="line">        String redisKey = <span class="string">&quot;test:tx&quot;</span>;</span><br><span class="line"></span><br><span class="line">        operations.multi();</span><br><span class="line"></span><br><span class="line">        operations.opsForSet().add(redisKey, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        operations.opsForSet().add(redisKey, <span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        operations.opsForSet().add(redisKey, <span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">//立即查询不会得出结果</span></span><br><span class="line">        System.out.println(operations.opsForSet().members(redisKey));</span><br><span class="line">        <span class="comment">// 提交事务</span></span><br><span class="line">        <span class="keyword">return</span> operations.exec();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;引入依赖&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;spring-boot-starter-data-redis&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="编程笔记" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
    <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>找不到请求的.Net Framework Data Provider.可能没有安装.  错误</title>
    <link href="http://yoursite.com/2019/07/27/%E6%89%BE%E4%B8%8D%E5%88%B0%E8%AF%B7%E6%B1%82%E7%9A%84-Net-Framework-Data-Provider-%E5%8F%AF%E8%83%BD%E6%B2%A1%E6%9C%89%E5%AE%89%E8%A3%85-%E9%94%99%E8%AF%AF/"/>
    <id>http://yoursite.com/2019/07/27/%E6%89%BE%E4%B8%8D%E5%88%B0%E8%AF%B7%E6%B1%82%E7%9A%84-Net-Framework-Data-Provider-%E5%8F%AF%E8%83%BD%E6%B2%A1%E6%9C%89%E5%AE%89%E8%A3%85-%E9%94%99%E8%AF%AF/</id>
    <published>2019-07-27T16:23:27.000Z</published>
    <updated>2020-08-30T15:52:19.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h1><p>这几天在装.NET 的开发环境，在装好VS2013和Oracle 11g之后，做了一个测试项目，运行调试没问题<br>但是涉及到数据库相关操作，如新建数据集、连接数据库等在调试的时候则会出现如下错误：</p><p><img src="http://i2.tiimg.com/726074/54b8fbc50c3df7e7.jpg" alt="找不到请求的 .Net Framework Data Provider。可能没有安装"></p><h1 id="目前百度之后现存的解决方案："><a href="#目前百度之后现存的解决方案：" class="headerlink" title="目前百度之后现存的解决方案："></a>目前百度之后现存的解决方案：</h1><ol><li><p>oracle odp.net 32位/64位版本的问题<br><a href="http://www.cnblogs.com/yjmyzz/archive/2011/04/19/2020793.html">解决方案链接</a>；当然如果觉得这篇写的不怎么清楚，还可以点击 <a href="https://www.cnblogs.com/gudi/p/6110875.html">这里</a><br><strong>*（我碰到的就是这个问题，但是据博主提供的方法没有解决问题）*</strong></p></li><li><p>Microsoft SQL Server Compact 4.0没有安装 这个问题是比较好解决的，只用安装Microsoft SQL Server Compact<br>4.0即可，具体可以点击<a href="https://blog.csdn.net/yuchou123456789/article/details/7031206">这里</a></p></li><li><p>还有修改machine.config配置文件的方法，大家也可以尝试<a href="http://qihuayu2010.blog.163.com/blog/static/18790015920138235546382/">点击这里</a></p><p>当然如果你的数据库使用的Oracle，节点配置的时候需要根据实际情况做出调整。<br>具体文件配置路径：C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Config下面的machine.config<br>用记事本打开，查看下列节点是否存在oracle的相关配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;system.data&gt;</span><br><span class="line">    &lt;DbProviderFactories&gt;</span><br><span class="line">      &lt;add name&#x3D;&quot;ODP.NET, Managed Driver&quot; invariant&#x3D;&quot;Oracle.ManagedDataAccess.Client&quot; description&#x3D;&quot;Oracle Data Provider for .NET, Managed Driver&quot; type&#x3D;&quot;Oracle.ManagedDataAccess.Client.OracleClientFactory, Oracle.ManagedDataAccess, Version&#x3D;4.121.2.0, Culture&#x3D;neutral, PublicKeyToken&#x3D;89b483f429c47342&quot; &#x2F;&gt;</span><br><span class="line">      &lt;add name&#x3D;&quot;Microsoft SQL Server Compact Data Provider 4.0&quot; invariant&#x3D;&quot;System.Data.SqlServerCe.4.0&quot; description&#x3D;&quot;.NET Framework Data Provider for Microsoft SQL Server Compact&quot; type&#x3D;&quot;System.Data.SqlServerCe.SqlCeProviderFactory, System.Data.SqlServerCe, Version&#x3D;4.0.0.0, Culture&#x3D;neutral, PublicKeyToken&#x3D;89845dcd8080cc91&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;DbProviderFactories&gt;</span><br><span class="line">  &lt;&#x2F;system.data&gt;</span><br></pre></td></tr></table></figure><p>新添加的应该是这一块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;add name&#x3D;&quot;ODP.NET, Managed Driver&quot; invariant&#x3D;&quot;Oracle.ManagedDataAccess.Client&quot; description&#x3D;&quot;Oracle Data Provider for .NET, Managed Driver&quot; type&#x3D;&quot;Oracle.ManagedDataAccess.Client.OracleClientFactory, Oracle.ManagedDataAccess, Version&#x3D;4.121.2.0, Culture&#x3D;neutral, PublicKeyToken&#x3D;89b483f429c47342&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><h1 id="个人解决方案"><a href="#个人解决方案" class="headerlink" title="个人解决方案"></a>个人解决方案</h1><p>前面说过了，我尝试了上述的一些办法之后仍然没有解决问题，熬不住了我就去csdn的论坛发了帖，等了半个小时没人回复（可能是积分太少吧），无奈我就自己继续鼓捣了。想起来自己有一个 ODAC 12c的安装包，就直接点击安装了，安装完成之后重启VS，继续新建项目，配置数据库，调试之后竟然没有再继续报错，也就是说这个问题被我糊里糊涂解决了，哈哈哈~</p><p>写一篇记录一下，给各位一个借鉴也给自己一个教训。<br>下面提供ODAC 12c的下载地址</p><p>官方下载地址：<a href="http://www.oracle.com/technetwork/database/windows/downloads/index-090165.html">x64下载</a>、<a href="http://www.oracle.com/technetwork/topics/dotnet/utilsoft-086879.html">x86下载</a></p><p>如果没有oracle账号又或是账号无法登陆，可以通过这个<a href="https://pan.baidu.com/s/13JEqOxtnqwVIu1ohEKds2g">链接</a>下载， 密码：amvz</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题：&quot;&gt;&lt;a href=&quot;#问题：&quot; class=&quot;headerlink&quot; title=&quot;问题：&quot;&gt;&lt;/a&gt;问题：&lt;/h1&gt;&lt;p&gt;这几天在装.NET 的开发环境，在装好VS2013和Oracle 11g之后，做了一个测试项目，运行调试没问题&lt;br&gt;但是涉及到数据</summary>
      
    
    
    
    <category term="编程笔记" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term=".Net" scheme="http://yoursite.com/tags/Net/"/>
    
  </entry>
  
  <entry>
    <title>讨论社区24  -  Redis入门</title>
    <link href="http://yoursite.com/2019/07/25/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA24%20-%20Redis%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2019/07/25/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA24%20-%20Redis%E5%85%A5%E9%97%A8/</id>
    <published>2019-07-25T23:12:41.000Z</published>
    <updated>2020-08-30T15:52:19.688Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><code>Redis</code>是一款基于键值对的<code>NoSQL</code>数据库，它的值支持多种数据结构：<br>字符串(strings)、哈希(hashes)、列表(lists)、集合(sets)、有序集合(sorted sets)等。</p><blockquote><p>redis是一个key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。</p><p>这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p></blockquote></li><li><p><code>Redis</code>将所有的数据都存放在内存中，所以它的读写性能十分惊人。<br>同时，<code>Redis</code>还可以将内存中的数据以快照或日志的形式保存到硬盘上，以保证数据的安全性。</p></li></ul><blockquote><p>RDB  体积小。以快照形式存储到硬盘比较耗时，也会对进程造成阻塞，故可以隔一段时间执行</p><p>AOF  可以实时存储。以日志形式存储<code>Redis</code>命令，是以追加日志的方式，占磁盘空间，恢复则是重复执行所有的记录命令，恢复速度较差。</p></blockquote><ul><li><code>Redis</code>典型的应用场景包括：缓存、排行榜、计数器、社交网络、消息队列等。</li></ul><h1 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h1><ol><li>官网下载压缩包安装  <a href="http://download.redis.io/releases/redis-3.0.0.tar.gz">http://download.redis.io/releases/redis-3.0.0.tar.gz</a></li><li>通过wget命令下载安装</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载之后解压到/usr/<span class="built_in">local</span>路径，进入redis文件夹，make编译安装</span></span><br><span class="line">wget http://download.redis.io/releases/redis-3.0.0.tar.gz</span><br><span class="line">tar -xvzf redis-3.0.0.tar.gz /usr/local</span><br><span class="line">cd redis-3.0.0</span><br><span class="line">make PREFIX=/usr/local/redis install</span><br></pre></td></tr></table></figure><p>启动redis服务端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 前台启动，终端关闭，服务端就关闭</span></span><br><span class="line">./redis-server</span><br><span class="line"><span class="meta">#</span><span class="bash"> 推荐使用下面的后台启动，终端关闭，服务端不会关闭</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改conf文件，将daemonize改为yes</span></span><br><span class="line">vim /usr/local/redis/bin/redis.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动redis服务端</span></span><br><span class="line">cd /usr/local/redis</span><br><span class="line">./bin/redis-server ./redis.conf</span><br></pre></td></tr></table></figure><p>启动redis客户端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli </span><br></pre></td></tr></table></figure><h1 id="Windows-安装"><a href="#Windows-安装" class="headerlink" title="Windows 安装"></a>Windows 安装</h1><p><a href="https://github.com/microsoftarchive/redis/releases/download/win-3.2.100/Redis-x64-3.2.100.msi">https://github.com/microsoftarchive/redis/releases/download/win-3.2.100/Redis-x64-3.2.100.msi</a></p><p>一路点击下一步即可安装，建议将安装路径添加到环境变量。</p><p>cmd  <code>$ redis-cli</code>  启动redis客户端</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="redis键值对的管理和操作"><a href="#redis键值对的管理和操作" class="headerlink" title="redis键值对的管理和操作"></a>redis键值对的管理和操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">1 DEL key</span><br><span class="line">该命令用于在 key 存在时删除 key。</span><br><span class="line">2 DUMP key</span><br><span class="line">序列化给定 key ，并返回被序列化的值。</span><br><span class="line">3 EXISTS key</span><br><span class="line">检查给定 key 是否存在。</span><br><span class="line">4 EXPIRE key seconds</span><br><span class="line">为给定 key 设置过期时间。</span><br><span class="line">5 EXPIREAT key timestamp</span><br><span class="line">EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。</span><br><span class="line">6 PEXPIRE key milliseconds</span><br><span class="line">设置 key 的过期时间以毫秒计。</span><br><span class="line">7 PEXPIREAT key milliseconds-timestamp</span><br><span class="line">设置 key 过期时间的时间戳(unix timestamp) 以毫秒计</span><br><span class="line">8 KEYS pattern</span><br><span class="line">查找所有符合给定模式( pattern)的 key 。</span><br><span class="line">9 MOVE key db</span><br><span class="line">将当前数据库的 key 移动到给定的数据库 db 当中。</span><br><span class="line">10 PERSIST key</span><br><span class="line">移除 key 的过期时间，key 将持久保持。</span><br><span class="line">11 PTTL key</span><br><span class="line">以毫秒为单位返回 key 的剩余的过期时间。</span><br><span class="line">12 TTL key</span><br><span class="line">以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。</span><br><span class="line">13 RANDOMKEY</span><br><span class="line">从当前数据库中随机返回一个 key 。</span><br><span class="line">14 RENAME key newkey</span><br><span class="line">修改 key 的名称</span><br><span class="line">15 RENAMENX key newkey</span><br><span class="line">仅当 newkey 不存在时，将 key 改名为 newkey 。</span><br><span class="line">16 TYPE key</span><br><span class="line">返回 key 所储存的值的类型。</span><br></pre></td></tr></table></figure><h2 id="redis哈希的操作"><a href="#redis哈希的操作" class="headerlink" title="redis哈希的操作"></a>redis哈希的操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">HDEL key field2 [field2] </span><br><span class="line">删除一个或多个哈希表字段</span><br><span class="line">HEXISTS key field </span><br><span class="line">查看哈希表 key 中，指定的字段是否存在。</span><br><span class="line">HGET key field </span><br><span class="line">获取存储在哈希表中指定字段的值。</span><br><span class="line">HGETALL key </span><br><span class="line">获取在哈希表中指定 key 的所有字段和值</span><br><span class="line">HINCRBY key field increment </span><br><span class="line">为哈希表 key 中的指定字段的整数值加上增量 increment 。</span><br><span class="line">HINCRBYFLOAT key field increment </span><br><span class="line">为哈希表 key 中的指定字段的浮点数值加上增量 increment 。</span><br><span class="line">HKEYS key </span><br><span class="line">获取所有哈希表中的字段</span><br><span class="line">HLEN key </span><br><span class="line">获取哈希表中字段的数量</span><br><span class="line">HMGET key field1 [field2] </span><br><span class="line">获取所有给定字段的值</span><br><span class="line">HMSET key field1 value1 [field2 value2 ] </span><br><span class="line">同时将多个 field-value (域-值)对设置到哈希表 key 中。</span><br><span class="line">HSET key field value </span><br><span class="line">将哈希表 key 中的字段 field 的值设为 value 。</span><br><span class="line">HSETNX key field value </span><br><span class="line">只有在字段 field 不存在时，设置哈希表字段的值。</span><br><span class="line">HVALS key </span><br><span class="line">获取哈希表中所有值HSCAN key cursor [MATCH pattern] [COUNT count] 迭代哈希表中的键值对。</span><br></pre></td></tr></table></figure><h2 id="redis列表操作"><a href="#redis列表操作" class="headerlink" title="redis列表操作"></a>redis列表操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">BLPOP key1 [key2 ] timeout </span><br><span class="line">移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</span><br><span class="line">BRPOP key1 [key2 ] timeout </span><br><span class="line">移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</span><br><span class="line">BRPOPLPUSH source destination timeout </span><br><span class="line">从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</span><br><span class="line">LINDEX key index </span><br><span class="line">通过索引获取列表中的元素</span><br><span class="line">LINSERT key BEFORE|AFTER pivot value </span><br><span class="line">在列表的元素前或者后插入元素</span><br><span class="line">LLEN key </span><br><span class="line">获取列表长度</span><br><span class="line">LPOP key </span><br><span class="line">移出并获取列表的第一个元素</span><br><span class="line">LPUSH key value1 [value2] </span><br><span class="line">将一个或多个值插入到列表头部</span><br><span class="line">LPUSHX key value </span><br><span class="line">将一个或多个值插入到已存在的列表头部</span><br><span class="line">LRANGE key start stop </span><br><span class="line">获取列表指定范围内的元素</span><br><span class="line">LREM key count value </span><br><span class="line">移除列表元素</span><br><span class="line">LSET key index value </span><br><span class="line">通过索引设置列表元素的值</span><br><span class="line">LTRIM key start stop </span><br><span class="line">对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</span><br><span class="line">RPOP key </span><br><span class="line">移除并获取列表最后一个元素</span><br><span class="line">RPOPLPUSH source destination </span><br><span class="line">移除列表的最后一个元素，并将该元素添加到另一个列表并返回</span><br><span class="line">RPUSH key value1 [value2] </span><br><span class="line">在列表中添加一个或多个值</span><br><span class="line">RPUSHX key value </span><br><span class="line">为已存在的列表添加值</span><br></pre></td></tr></table></figure><h2 id="redis集合"><a href="#redis集合" class="headerlink" title="redis集合"></a>redis集合</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">SADD key member1 [member2] </span><br><span class="line">向集合添加一个或多个成员</span><br><span class="line">SCARD key </span><br><span class="line">获取集合的成员数</span><br><span class="line">SDIFF key1 [key2] </span><br><span class="line">返回给定所有集合的差集</span><br><span class="line">SDIFFSTORE destination key1 [key2] </span><br><span class="line">返回给定所有集合的差集并存储在 destination 中</span><br><span class="line">SINTER key1 [key2] </span><br><span class="line">返回给定所有集合的交集</span><br><span class="line">SINTERSTORE destination key1 [key2] </span><br><span class="line">返回给定所有集合的交集并存储在 destination 中</span><br><span class="line">SISMEMBER key member </span><br><span class="line">判断 member 元素是否是集合 key 的成员</span><br><span class="line">SMEMBERS key </span><br><span class="line">返回集合中的所有成员</span><br><span class="line">SMOVE source destination member </span><br><span class="line">将 member 元素从 source 集合移动到 destination 集合</span><br><span class="line">SPOP key </span><br><span class="line">移除并返回集合中的一个随机元素</span><br><span class="line">SRANDMEMBER key [count] </span><br><span class="line">返回集合中一个或多个随机数</span><br><span class="line">SREM key member1 [member2] </span><br><span class="line">移除集合中一个或多个成员</span><br><span class="line">SUNION key1 [key2] </span><br><span class="line">返回所有给定集合的并集</span><br><span class="line">SUNIONSTORE destination key1 [key2] </span><br><span class="line">所有给定集合的并集存储在 destination 集合中</span><br><span class="line">SSCAN key cursor [MATCH pattern] [COUNT count] </span><br><span class="line">迭代集合中的元素</span><br></pre></td></tr></table></figure><h2 id="有序集合"><a href="#有序集合" class="headerlink" title="有序集合"></a>有序集合</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">ZADD key score1 member1 [score2 member2] </span><br><span class="line">向有序集合添加一个或多个成员，或者更新已存在成员的分数</span><br><span class="line">ZCARD key </span><br><span class="line">获取有序集合的成员数</span><br><span class="line">ZCOUNT key min max </span><br><span class="line">计算在有序集合中指定区间分数的成员数</span><br><span class="line">ZINCRBY key increment member </span><br><span class="line">有序集合中对指定成员的分数加上增量 increment</span><br><span class="line">ZINTERSTORE destination numkeys key [key ...] </span><br><span class="line">计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</span><br><span class="line">ZLEXCOUNT key min max </span><br><span class="line">在有序集合中计算指定字典区间内成员数量</span><br><span class="line">ZRANGE key start stop [WITHSCORES] </span><br><span class="line">通过索引区间返回有序集合成指定区间内的成员</span><br><span class="line">ZRANGEBYLEX key min max [LIMIT offset count] </span><br><span class="line">通过字典区间返回有序集合的成员</span><br><span class="line">ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT] </span><br><span class="line">通过分数返回有序集合指定区间内的成员</span><br><span class="line">ZRANK key member </span><br><span class="line">返回有序集合中指定成员的索引</span><br><span class="line">ZREM key member [member ...] </span><br><span class="line">移除有序集合中的一个或多个成员</span><br><span class="line">ZREMRANGEBYLEX key min max </span><br><span class="line">移除有序集合中给定的字典区间的所有成员</span><br><span class="line">ZREMRANGEBYRANK key start stop </span><br><span class="line">移除有序集合中给定的排名区间的所有成员</span><br><span class="line">ZREMRANGEBYSCORE key min max </span><br><span class="line">移除有序集合中给定的分数区间的所有成员</span><br><span class="line">ZREVRANGE key start stop [WITHSCORES] </span><br><span class="line">返回有序集中指定区间内的成员，通过索引，分数从高到底</span><br><span class="line">ZREVRANGEBYSCORE key max min [WITHSCORES] </span><br><span class="line">返回有序集中指定分数区间内的成员，分数从高到低排序</span><br><span class="line">ZREVRANK key member </span><br><span class="line">返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</span><br><span class="line">ZSCORE key member </span><br><span class="line">返回有序集中，成员的分数值</span><br><span class="line">ZUNIONSTORE destination numkeys key [key ...] </span><br><span class="line">计算给定的一个或多个有序集的并集，并存储在新的 key 中</span><br><span class="line">ZSCAN key cursor [MATCH pattern] [COUNT count] </span><br><span class="line">迭代有序集合中的元素（包括元素成员和元素分值）</span><br></pre></td></tr></table></figure><h2 id="redis事务的实现"><a href="#redis事务的实现" class="headerlink" title="redis事务的实现"></a>redis事务的实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DISCARD </span><br><span class="line">取消事务，放弃执行事务块内的所有命令。</span><br><span class="line">EXEC </span><br><span class="line">执行所有事务块内的命令。</span><br><span class="line">MULTI </span><br><span class="line">标记一个事务块的开始。</span><br><span class="line">UNWATCH </span><br><span class="line">取消 WATCH 命令对所有 key 的监视。</span><br><span class="line">WATCH key [key ...] </span><br><span class="line">监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</span><br></pre></td></tr></table></figure><p><a href="https://redis.io/">https://redis.io</a></p><p><a href="https://github.com/microsoftarchive/redis">https://github.com/microsoftarchive/redis</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Redis&lt;/code&gt;是一款基于键值对的&lt;code&gt;NoSQL&lt;/code&gt;数据库，它的值支持多种数据结构：&lt;br&gt;字符串(strings)、哈希(hashes)、列表(lists)、集合(sets)、有序集合(sorted sets)等。&lt;</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="编程笔记" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
    <category term="NoSQL" scheme="http://yoursite.com/tags/NoSQL/"/>
    
  </entry>
  
  <entry>
    <title>讨论社区23  -  统一记录日志</title>
    <link href="http://yoursite.com/2019/07/22/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA23%20-%20%E7%BB%9F%E4%B8%80%E5%A4%84%E7%90%86%E6%97%A5%E5%BF%97/"/>
    <id>http://yoursite.com/2019/07/22/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA23%20-%20%E7%BB%9F%E4%B8%80%E5%A4%84%E7%90%86%E6%97%A5%E5%BF%97/</id>
    <published>2019-07-22T22:54:11.000Z</published>
    <updated>2020-08-30T15:52:19.688Z</updated>
    
    <content type="html"><![CDATA[<p><strong>需求</strong>：</p><ul><li>帖子模块</li><li>评论模块</li><li>消息模块</li></ul><p><strong>AOP的概念</strong>：</p><ul><li>Aspect Oriented Programing，即面向方面（切面）编程。</li><li>AOP是一种编程思想，是对OOP的补充，可以进一步提高编程的效率。</li></ul><p><img src="https://i1.fuimg.com/726074/70e961c2251f0f5b.png" alt="统一处理需求"></p><p><strong>AOP的术语</strong>：</p><p><img src="https://i1.fuimg.com/726074/b773c874e790cce7.png" alt="AOP术语"></p><p>每一个<code>Bean</code>称为一个<code>Target</code>，目标对象上有多处可以织入代码，可织入的点称为<code>Joinpoint</code>，<code>AOP</code>解决统一处理需求的方式是将代码定义到切片组件<code>Aspect</code>中，<code>Aspect</code>要通过<code>Pointcut</code>知道哪些位置需要织入代码，最后需要<code>Advice</code>处理通知。</p><p><strong><code>AOP</code>的实现</strong></p><ul><li><p><code>AspectJ</code></p><ul><li>AspectJ是语言级的实现，它扩展了Java语言，定义了AOP语法。</li><li>AspectJ在编译期织入代码，它有一个专门的编译器，用来生成遵守Java字节码规范的class文件。</li></ul></li><li><p><code>Spring AOP</code></p><ul><li><code>Spring AOP</code>使用纯Java实现，它不需要专门的编译过程，也不需要特殊的类装载器。</li><li><code>Spring AOP</code>在运行时通过代理的方式织入代码，只支持<strong>方法类型的连接点</strong>。</li><li><code>Spring</code>支持对<code>AspectJ</code>的集成。</li></ul><p><code>Spring AOP </code>是一个高性价比的<code>AOP</code>实现技术。</p></li></ul><p><strong><code>Spring AOP</code></strong></p><ul><li><code>JDK</code>动态代理<ul><li><code>Java</code>提供的动态代理技术，可以在运行时创建接口的代理实例。</li><li><code>Spring AOP</code>默认采用此种方式，在接口的代理实例中织入代码。</li></ul></li><li><code>CGLib</code>动态代理<ul><li>采用底层的字节码技术，在运行时创建子类代理实例。</li><li>当目标对象不存在接口时，<code>Spring AOP</code>会采用此种方式，在子类实例中织入代码。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlphaAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// service 包下所有class的所有方法及所有返回值</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.wx.talking.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointcut</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;around before&quot;</span>);</span><br><span class="line">        Object obj = joinPoint.proceed(); <span class="comment">//Target的方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;around after&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;帖子模块&lt;/li&gt;
&lt;li&gt;评论模块&lt;/li&gt;
&lt;li&gt;消息模块&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;AOP的概念&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Aspect Oriented Pr</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="编程笔记" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="日志处理" scheme="http://yoursite.com/tags/%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/"/>
    
    <category term="Spring AOP" scheme="http://yoursite.com/tags/Spring-AOP/"/>
    
  </entry>
  
  <entry>
    <title>讨论社区22  -  统一处理异常</title>
    <link href="http://yoursite.com/2019/07/20/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA22%20-%20%E7%BB%9F%E4%B8%80%E8%AE%B0%E5%BD%95%E5%BC%82%E5%B8%B8/"/>
    <id>http://yoursite.com/2019/07/20/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA22%20-%20%E7%BB%9F%E4%B8%80%E8%AE%B0%E5%BD%95%E5%BC%82%E5%B8%B8/</id>
    <published>2019-07-20T23:52:14.000Z</published>
    <updated>2020-08-30T15:52:19.688Z</updated>
    
    <content type="html"><![CDATA[<p>SpringBoot 的统一处理方法：</p><p>在template文件夹下包含error文件夹，且内容为<code>错误代码.html</code>文件。 <code>template/error/404.html</code></p><ul><li><code>@ControllerAdvice</code><ul><li>用于修饰类，表示该类是Controller的全局配置类。</li><li>在此类中，可以对Controller进行如下三种全局配置：异常处理方案、绑定数据方案、绑定参数方案。</li></ul></li><li><code>@ExceptionHandler</code><ul><li>用于修饰方法，该方法会在Controller出现异常后被调用，用于处理捕获到的异常。</li></ul></li><li><code>@ModelAttribute</code><ul><li>用于修饰方法，该方法会在Controller方法执行前被调用，用于为Model对象绑定参数。</li></ul></li><li><code>@DataBinder</code><ul><li>用于修饰方法，该方法会在Controller方法执行前被调用，用于绑定参数的转换器。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在Controller出现异常后被调用</span></span><br><span class="line"><span class="meta">@ControllerAdvice(annotations = Controller.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(ExceptionAdvice.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;Exception.class&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleException</span><span class="params">(Exception e, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        logger.error(<span class="string">&quot;服务器发生异常: &quot;</span> + e.getMessage());</span><br><span class="line">        <span class="keyword">for</span> (StackTraceElement element : e.getStackTrace()) &#123;</span><br><span class="line">            logger.error(element.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回的是异步请求？普通请求</span></span><br><span class="line">        String xRequestedWith = request.getHeader(<span class="string">&quot;x-requested-with&quot;</span>); </span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;XMLHttpRequest&quot;</span>.equals(xRequestedWith)) &#123;</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/plain;charset=utf-8&quot;</span>);</span><br><span class="line">            PrintWriter writer = response.getWriter();</span><br><span class="line">            <span class="comment">//...转成JSON对象反馈给视图....</span></span><br><span class="line">            writer.write(getJSONString(<span class="number">1</span>, <span class="string">&quot;服务器异常!&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response.sendRedirect(request.getContextPath() + <span class="string">&quot;/error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;SpringBoot 的统一处理方法：&lt;/p&gt;
&lt;p&gt;在template文件夹下包含error文件夹，且内容为&lt;code&gt;错误代码.html&lt;/code&gt;文件。 &lt;code&gt;template/error/404.html&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="编程笔记" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="注解" scheme="http://yoursite.com/tags/%E6%B3%A8%E8%A7%A3/"/>
    
    <category term="异常处理" scheme="http://yoursite.com/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>讨论社区21  -  私信列表和发送私信</title>
    <link href="http://yoursite.com/2019/07/18/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA21%20-%20%E7%A7%81%E4%BF%A1%E5%88%97%E8%A1%A8%E5%92%8C%E5%8F%91%E9%80%81%E7%A7%81%E4%BF%A1/"/>
    <id>http://yoursite.com/2019/07/18/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA21%20-%20%E7%A7%81%E4%BF%A1%E5%88%97%E8%A1%A8%E5%92%8C%E5%8F%91%E9%80%81%E7%A7%81%E4%BF%A1/</id>
    <published>2019-07-18T21:22:14.000Z</published>
    <updated>2020-08-30T15:52:19.688Z</updated>
    
    <content type="html"><![CDATA[<p>表结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;message&#96; (</span><br><span class="line">  &#96;id&#96; int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;from_id&#96; int DEFAULT NULL,</span><br><span class="line">  &#96;to_id&#96; int DEFAULT NULL,</span><br><span class="line">  &#96;conversation_id&#96; varchar(100) DEFAULT NULL,</span><br><span class="line">  &#96;content&#96; text,</span><br><span class="line">  &#96;status&#96; int DEFAULT NULL COMMENT &#39;&#39;&#39;0-未读;1-已读;2-删除;&#39;&#39;&#39;,</span><br><span class="line">  &#96;create_time&#96; timestamp NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure><p><code>id </code>为表主键，<code>from_id</code> 、<code>to_id</code> 发送人、接收人；<code>conversation_id </code>为冗余的会话id，便于查询，拼接规则是 <code>from_id-to_id </code>（但是小<code>id</code>在前，大<code>id</code>在后）；<code>content</code>为会话内容；<code>status</code>为会话状态。</p><p>注：系统或超级管理员在表中<code>user_id</code>为1，所以在查询的时候，<code>from_id</code>为1的会话是系统下发的通知。</p><h1 id="发送私信"><a href="#发送私信" class="headerlink" title="发送私信"></a>发送私信</h1><ul><li>发送私信<ul><li>采用异步的方式发送私信。</li><li>发送成功后刷新私信列表。</li></ul></li><li>设置已读<ul><li>访问私信详情时，将显示的私信设置为已读状态。</li></ul></li></ul><h1 id="私信列表"><a href="#私信列表" class="headerlink" title="私信列表"></a>私信列表</h1><ul><li>私信列表<ul><li>查询当前用户的会话列表</li><li>每个会话只显示一条最新的私信。</li><li>支持分页显示。</li></ul></li><li>私信详情<ul><li>查询某个会话所包含的私信。</li><li>支持分页显示。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;表结构&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>讨论社区20  -  显示、添加评论</title>
    <link href="http://yoursite.com/2019/07/16/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA20%20-%20%E6%98%BE%E7%A4%BA%E3%80%81%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA/"/>
    <id>http://yoursite.com/2019/07/16/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA20%20-%20%E6%98%BE%E7%A4%BA%E3%80%81%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA/</id>
    <published>2019-07-16T22:23:14.000Z</published>
    <updated>2020-08-30T15:52:19.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="显示评论"><a href="#显示评论" class="headerlink" title="显示评论"></a>显示评论</h1><ul><li><p>数据层</p><ul><li>根据实体查询一页评论数据。</li><li>根据实体查询评论的数量。</li></ul></li><li><p>业务层</p><ul><li>处理查询评论的业务。</li><li>处理查询评论数量的业务。</li></ul></li><li><p>表现层</p><ul><li>显示帖子详情数据时，同时显示该帖子所有的评论数据。</li></ul><p>层层封装</p></li></ul><h1 id="添加评论"><a href="#添加评论" class="headerlink" title="添加评论"></a>添加评论</h1><ul><li><p>数据层</p><ul><li>增加评论数据。</li><li>修改帖子的评论数量。</li></ul></li><li><p>业务层</p><ul><li>处理添加评论的业务：先增加评论、再更新帖子的评论数量。</li></ul><p>使用声明式事务</p></li><li><p>表现层</p><ul><li>处理添加评论数据的请求。</li><li>设置添加评论的表单。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;显示评论&quot;&gt;&lt;a href=&quot;#显示评论&quot; class=&quot;headerlink&quot; title=&quot;显示评论&quot;&gt;&lt;/a&gt;显示评论&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数据层&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据实体查询一页评论数据。&lt;/li&gt;
&lt;li&gt;根据实体查询评论的数量。&lt;</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>讨论社区19  -  事务管理</title>
    <link href="http://yoursite.com/2019/07/14/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA19%20-%20%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2019/07/14/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA19%20-%20%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/</id>
    <published>2019-07-14T20:51:04.000Z</published>
    <updated>2020-08-30T15:52:19.688Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><strong>回顾</strong></p><ul><li>什么是事务<ul><li>事务是由N步数据库操作序列组成的逻辑执行单元，这系列操作要么全执行，要么全放弃执行。</li></ul></li><li>事务的特性（ACID）<ul><li>原子性（Atomicity）：事务是应用中不可再分的最小执行体。</li><li>一致性（Consistency）：事务执行的结果，须使数据从一个一致性状态，变为另一个一致性状态。</li><li>隔离性（Isolation）：各个事务的执行互不干扰，任何事务的内部操作对其他的事务都是隔离的。</li><li>持久性（Durability）：事务一旦提交，对数据所做的任何改变都要记录到永久存储器中。</li></ul></li></ul><p><strong>事务的隔离性</strong></p><ul><li>常见的并发异常<ul><li>第一类丢失更新、第二类丢失更新。</li><li>脏读、不可重复读、幻读。</li></ul></li><li>常见的隔离级别<ul><li>Read Uncommitted：读取未提交的数据。</li><li>Read Committed：读取已提交的数据。</li><li>Repeatable Read：可重复读。</li><li>Serializable：串行化。</li></ul></li></ul><p><strong>第一类丢失更新</strong>：某一个事务的回滚，导致另外一个事务已更新的数据丢失了。</p><p><strong>第二类丢失更新</strong>：某一个事务的提交，导致另外一个事务已更新的数据丢失了。</p><p><strong>脏读</strong>：某一个事务，读取了另外一个事务未提交的数据。</p><p><strong>不可重复读</strong>：某一个事务，对同一个数据前后读取的结果不一致。</p><p><strong>幻读</strong>：某一个事务，对同一个表前后查询到的行数不一致。</p><p><strong>事务隔离级别</strong>：</p><p><img src="http://i1.fuimg.com/726074/0b7ef951b61e2ecf.png" alt="事务隔离级别"></p><p><strong>实现机制</strong></p><ul><li>悲观锁（数据库）<ul><li>共享锁（S锁）<br>事务A对某数据加了共享锁后，其他事务只能对该数据加共享锁，但不能加排他锁。</li><li>排他锁（X锁）<br>事务A对某数据加了排他锁后，其他事务对该数据既不能加共享锁，也不能加排他锁。</li></ul></li><li>乐观锁（自定义）<ul><li>版本号、时间戳等<br>在更新数据前，检查版本号是否发生变化。若变化则取消本次更新，否则就更新数据（版本号+1）。</li></ul></li></ul><p><strong>Spring事务管理</strong></p><ul><li><p>声明式事务</p><ul><li>通过XML配置，声明某方法的事务特征。</li><li>通过注解，声明某方法的事务特征。</li></ul></li><li><p>编程式事务</p><ul><li>通过 TransactionTemplate 管理事务，并通过它执行数据库的操作。</li></ul></li></ul></li></ul><p>demo：用户注册并发帖</p><p>1 使用@Transactional 注入</p><p>2 使用TransactionTemplate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// REQUIRED: 支持当前事务(外部事务),如果不存在则创建新事务.</span></span><br><span class="line"><span class="comment">// REQUIRES_NEW: 创建一个新事务,并且暂停当前事务(外部事务).</span></span><br><span class="line"><span class="comment">// NESTED: 如果当前存在事务(外部事务),则嵌套在该事务中执行(独立的提交和回滚),否则就会REQUIRED一样.</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED, propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">save1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//新增用户</span></span><br><span class="line">    ....</span><br><span class="line">    <span class="comment">//新增帖子</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TransactionTemplate transactionTemplate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">save2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    transactionTemplate.setIsolationLevel(TransactionDefinition.ISOLATION_READ_COMMITTED);</span><br><span class="line">    transactionTemplate.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> transactionTemplate.execute(<span class="keyword">new</span> TransactionCallback&lt;Object&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">doInTransaction</span><span class="params">(TransactionStatus status)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//新增用户</span></span><br><span class="line">            ....</span><br><span class="line">            <span class="comment">//新增帖子</span></span><br><span class="line">            ....</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;回顾&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么是事务&lt;ul&gt;
&lt;li&gt;事务是由N步数据库操作序列组成的逻辑执行单元，这系列操作要么全执行，要么全放弃执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;事务的特性（ACID）&lt;ul&gt;
&lt;</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="事务" scheme="http://yoursite.com/tags/%E4%BA%8B%E5%8A%A1/"/>
    
    <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
    <category term="事务隔离" scheme="http://yoursite.com/tags/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/"/>
    
    <category term="事务管理" scheme="http://yoursite.com/tags/%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>讨论社区18  -  帖子详情</title>
    <link href="http://yoursite.com/2019/07/12/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA18%20-%20%E5%B8%96%E5%AD%90%E8%AF%A6%E6%83%85/"/>
    <id>http://yoursite.com/2019/07/12/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA18%20-%20%E5%B8%96%E5%AD%90%E8%AF%A6%E6%83%85/</id>
    <published>2019-07-12T22:01:51.000Z</published>
    <updated>2020-08-30T15:52:19.688Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>DiscussPostMapper       定义DAO方法</p></li><li><p>DiscussPostService         业务层</p></li><li><p>DiscussPostController    控制层</p></li><li><p>index.html</p><ul><li>在帖子标题上增加访问详情页面的链接</li></ul></li><li><p>discuss-detail.html</p><ul><li>处理静态资源的访问路径</li><li>复用index.html的header区域</li><li>显示标题、作者、发布时间、帖子正文等内容</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;DiscussPostMapper       定义DAO方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DiscussPostService         业务层&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DiscussPostController    控制层&lt;/p</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
</feed>
