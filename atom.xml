<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4Details</title>
  
  <subtitle>你知道的越多，不知道的越多</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-09-01T01:07:00.680Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wangxu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>回文串引发的“血案”</title>
    <link href="http://yoursite.com/2020/08/28/%E5%9B%9E%E6%96%87%E4%B8%B2%E5%BC%95%E5%8F%91%E7%9A%84%E2%80%9C%E8%A1%80%E6%A1%88%E2%80%9D/"/>
    <id>http://yoursite.com/2020/08/28/%E5%9B%9E%E6%96%87%E4%B8%B2%E5%BC%95%E5%8F%91%E7%9A%84%E2%80%9C%E8%A1%80%E6%A1%88%E2%80%9D/</id>
    <published>2020-08-28T14:10:52.000Z</published>
    <updated>2020-09-01T01:07:00.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单枚举"><a href="#简单枚举" class="headerlink" title="简单枚举"></a>简单枚举</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于中心线枚举</span></span><br><span class="line">Class Solution:</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span>(<span class="params">self,s</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        self.start, self.longest = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> middle <span class="keyword">in</span> range(len(s)):</span><br><span class="line">            self.find_longest_palidrome_from(s, middle, middle)</span><br><span class="line">            self.find_longest_palidrome_from(s, middle, middle+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> s[self.start:self.start + self.longest]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_longest_palidrome_from</span>(<span class="params">self, s, left, right</span>):</span></span><br><span class="line">        <span class="keyword">while</span> left &gt;= <span class="number">0</span> <span class="keyword">and</span> right &lt; len(s) <span class="keyword">and</span> s[left] == s[right]:</span><br><span class="line">            left -= <span class="number">1</span></span><br><span class="line">            right += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.longest &lt; right -left <span class="number">-1</span>:</span><br><span class="line">            self.longest = right - left <span class="number">-1</span></span><br><span class="line">            self.start = left +<span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于动态规划（区间型：从小到大枚举区间）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        n = len(s)</span><br><span class="line">        is_palindrome = [[<span class="literal">False</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            is_palindrome[i][i] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">            is_palindrome[i][i<span class="number">-1</span>] = <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        start, longest = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> length <span class="keyword">in</span> range(<span class="number">2</span>, n<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(n - length + <span class="number">1</span>):</span><br><span class="line">                j = i + length <span class="number">-1</span></span><br><span class="line">                is_palindrome[i][j] = is_palindrome[i+<span class="number">1</span>][j<span class="number">-1</span>] <span class="keyword">and</span> s[i] == s[j]</span><br><span class="line">                <span class="keyword">if</span> is_palindrome[i][j] <span class="keyword">and</span> length &gt; longest:</span><br><span class="line">                    longest = length</span><br><span class="line">                    start = i</span><br><span class="line">         <span class="keyword">return</span> s[start:start + longest]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简单枚举&quot;&gt;&lt;a href=&quot;#简单枚举&quot; class=&quot;headerlink&quot; title=&quot;简单枚举&quot;&gt;&lt;/a&gt;简单枚举&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p</summary>
      
    
    
    
    <category term="算法笔记" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="回文串" scheme="http://yoursite.com/tags/%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    
    <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>FATE 1.2 实践02-FATE集群部署</title>
    <link href="http://yoursite.com/2020/08/27/FATE-1-2-%E5%AE%9E%E8%B7%B502%EF%BC%9AFATE%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2020/08/27/FATE-1-2-%E5%AE%9E%E8%B7%B502%EF%BC%9AFATE%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</id>
    <published>2020-08-27T05:49:03.000Z</published>
    <updated>2020-09-01T01:07:00.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置FATE环境"><a href="#配置FATE环境" class="headerlink" title="配置FATE环境"></a>配置FATE环境</h1><p>第1步中虚拟机创建完成后的信息如下</p><table><thead><tr><th>主机名</th><th>host155</th><th>guest156</th><th>guest157</th></tr></thead><tbody><tr><td>IP</td><td>192.168.119.155</td><td>192.168.119.156</td><td>192.168.119.157</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><p>下面的步骤均是依据官方文档操作 </p><h2 id="基础环境配置"><a href="#基础环境配置" class="headerlink" title="基础环境配置"></a>基础环境配置</h2><p>注意：不特殊说明，下面配置需要在所有机器上操作！！</p><p>由于在创建虚拟机过程中已经更改过每台主机名、创建用户app，所以文档中hostname配置可跳过。</p><p>root权限下创建文件夹  /data/projects 归属 app用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;切换root用户，-p创建文件夹，给app用户赋予权限</span><br><span class="line">su root</span><br><span class="line">mkdir -p &#x2F;data&#x2F;projects</span><br><span class="line">chown -R app &#x2F;data&#x2F;projects</span><br></pre></td></tr></table></figure><h3 id="关闭selinux"><a href="#关闭selinux" class="headerlink" title="关闭selinux"></a>关闭selinux</h3><p>确认是否已安装selinux</p><p>centos系统执行：rpm -qa | grep selinux</p><p>ubuntu系统执行：apt list –installed | grep selinux</p><p>如果已安装了selinux就执行：setenforce 0</p><p><img src="https://i2.tiimg.com/726074/1ffc89980ab43ca6.png" alt="关闭selinux"></p><h3 id="修改Linux最大打开文件数"><a href="#修改Linux最大打开文件数" class="headerlink" title="修改Linux最大打开文件数"></a>修改Linux最大打开文件数</h3><p>切换root用户，在limits.conf文件最后添加5、6行代码，保存退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line"></span><br><span class="line">vim &#x2F;etc&#x2F;security&#x2F;limits.conf</span><br><span class="line"></span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br></pre></td></tr></table></figure><p><img src="https://i2.tiimg.com/726074/2e80d0e8b8f1b7aa.png" alt="编辑最大打开文件数"></p><h3 id="添加主机映射"><a href="#添加主机映射" class="headerlink" title="添加主机映射"></a>添加主机映射</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;hosts</span><br></pre></td></tr></table></figure><p><img src="https://i2.tiimg.com/726074/bb54d423f32f45d0.png" alt="添加主机映射"></p><h3 id="关闭虚拟机防火墙"><a href="#关闭虚拟机防火墙" class="headerlink" title="关闭虚拟机防火墙"></a>关闭虚拟机防火墙</h3><p>在实际生产环境中需要配置防火墙端口规则！虚拟机环境下采用关闭防火墙的方式。</p><p>如果是Centos系统：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable firewalld.service</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl status firewalld.service</span><br></pre></td></tr></table></figure><p>本例的环境是Centos系统</p><p><img src="https://i2.tiimg.com/726074/556664f24d0921ef.png" alt="关闭虚拟机防火墙"></p><p>如果是Ubuntu系统：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ufw disable</span><br><span class="line">ufw status</span><br></pre></td></tr></table></figure><h3 id="给用户赋予sudo权限"><a href="#给用户赋予sudo权限" class="headerlink" title="给用户赋予sudo权限"></a>给用户赋予sudo权限</h3><p>root用户下对app用户赋予sudo权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;sudoers.d&#x2F;app</span><br><span class="line"></span><br><span class="line">app ALL&#x3D;(ALL) ALL</span><br><span class="line">app ALL&#x3D;(ALL) NOPASSWD: ALL</span><br><span class="line">Defaults !env_reset</span><br></pre></td></tr></table></figure><h3 id="配置ssh远程登录"><a href="#配置ssh远程登录" class="headerlink" title="配置ssh远程登录"></a>配置ssh远程登录</h3><p><strong>a. 切换app用户，生成rsa_id，具体根据下面代码</strong></p><p><img src="https://i2.tiimg.com/726074/42d5722d58facb33.png" alt="配置ssh登录01"></p><p><strong>b.合并id_rsa_pub文件</strong></p><p><strong>步骤如下：三台机器分别将id_rsa.pub 写入authorized_keys文件中并且赋予权限chomd 600</strong></p><p><img src="https://i2.tiimg.com/726074/e77b099df3e5875a.png" alt="配置ssh登录02"></p><p>155通过scp将authorized_keys文件发送到156上，并将156的id_rsa.pub文件写入，然后将生成的新文件发送至157上，并且写入157生成的id_rsa.pub文件，将最终生成的authorized_keys文件发送给155和156，此时通过ssh即可登录（在发送文件过程中建立连接需要输入密码）</p><p>155-&gt;156</p><p><img src="https://i2.tiimg.com/726074/adf0d7c9e4b5a816.png" alt="155-&gt;156"></p><p>156写入， -&gt;157</p><p><img src="https://i2.tiimg.com/726074/1face612066cd770.png" alt="156-&gt;157"></p><p>157写入，-&gt;155  -&gt;156</p><p><img src="https://i2.tiimg.com/726074/76290d4bf4c62660.png" alt="157-&gt;155 156"></p><p><strong>上述完成之后即可通过  ssh usernane@ip访问某台虚拟机</strong></p><p>需要注意的是，访问自身需要重新建立一个连接。</p><p>建议配置以上步骤之后拍摄虚拟机快照，便于后期恢复重新部署。</p><h2 id="FATE部署"><a href="#FATE部署" class="headerlink" title="FATE部署"></a>FATE部署</h2><p>完成基础环境配置之后，接下来就需要部署FATE的运行环境，本例使用的是<a href="https://github.com/FederatedAI/FATE/blob/master/cluster-deploy/doc/Fate-cluster_deployment_guide_install_zh.md">Installation</a>文档。</p><p>下面的操作<strong>只需在其中一台机器操作即可</strong>，本例选用的是host 155。</p><h3 id="下载压缩包"><a href="#下载压缩包" class="headerlink" title="下载压缩包"></a>下载压缩包</h3><p>可以使用wget下载，也可以直接通过<a href="https://webank-ai-1251170195.cos.ap-guangzhou.myqcloud.com/FATE_install_v1.2.0.tar.gz">链接</a>下载。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;data&#x2F;projects</span><br><span class="line">wget https:&#x2F;&#x2F;webank-ai-1251170195.cos.ap-guangzhou.myqcloud.com&#x2F;FATE_install_v1.2.0.tar.gz</span><br><span class="line">tar -xf FATE_install_v1.2.0.tar.gz</span><br></pre></td></tr></table></figure><p><img src="https://i2.tiimg.com/726074/c119001e5577e31a.png" alt="下载压缩包并解压"></p><h3 id="修改configuration文件"><a href="#修改configuration文件" class="headerlink" title="修改configuration文件"></a>修改configuration文件</h3><p>可以使用vim，也可以直接使用编辑器打开并修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;data&#x2F;projects&#x2F;FATE&#x2F;cluster-deploy&#x2F;script</span><br><span class="line">vi multinode_cluster_configuration.sh</span><br></pre></td></tr></table></figure><p><img src="https://i2.tiimg.com/726074/bd4b622b82444ffd.png" alt="修改conf文件"></p><p><img src="https://i2.tiimg.com/726074/c2aca491c2558507.png" alt="b端配置"></p><p>建议在部署之前拍摄快照，为防止在部署过程中因某些配置出错造成部署失败。</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>本例中选择在各机器上部署所有组件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd FATE&#x2F;cluster-deploy&#x2F;scripts</span><br><span class="line"># 部署所有组件</span><br><span class="line">bash deploy_cluster_multinode.sh binary all </span><br><span class="line"># 只部署部分组件(可选：jdk python mysql redis fate_flow federatedml fateboard proxy federation roll meta-service egg)：</span><br><span class="line">bash deploy_cluster_multinode.sh binary fate_flow</span><br></pre></td></tr></table></figure><p>-———————————————————————————————————————-</p><p>———————————————–漫长地等待过程——————————————————–</p><p>-———————————————————————————————————————-</p><p>（部署时间暂未统计，时间需要2-4个小时，记录下了部署过程中终端产生的日志）</p><p>此处为语雀文档，点击链接查看：<a href="https://www.yuque.com/u190689/qoiq3w/seeq38">https://www.yuque.com/u190689/qoiq3w/seeq38</a></p><h2 id="配置检查"><a href="#配置检查" class="headerlink" title="配置检查"></a>配置检查</h2><p>请务必详细对照检查！！！</p><p>到各个目标服务器上进行检查对应模块的配置是否准确，每个模块的对应配置文件所在路径可在此配置文件下查看，参考：<a href="https://github.com/FederatedAI/FATE/blob/master/cluster-deploy/doc/configuration.md">https://github.com/FederatedAI/FATE/blob/master/cluster-deploy/doc/configuration.md</a></p><p>至此，FATE v1.2的安装部署全部结束，接下来测试环境。</p><p>建议部署成功之后拍摄快照，便于将来找到还原点。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;配置FATE环境&quot;&gt;&lt;a href=&quot;#配置FATE环境&quot; class=&quot;headerlink&quot; title=&quot;配置FATE环境&quot;&gt;&lt;/a&gt;配置FATE环境&lt;/h1&gt;&lt;p&gt;第1步中虚拟机创建完成后的信息如下&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th</summary>
      
    
    
    
    <category term="联邦学习" scheme="http://yoursite.com/categories/%E8%81%94%E9%82%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="FATE" scheme="http://yoursite.com/tags/FATE/"/>
    
    <category term="FL" scheme="http://yoursite.com/tags/FL/"/>
    
  </entry>
  
  <entry>
    <title>FATE 1.2 实践01-虚拟机安装</title>
    <link href="http://yoursite.com/2020/08/27/FATE-1-2-%E5%AE%9E%E8%B7%B501%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2020/08/27/FATE-1-2-%E5%AE%9E%E8%B7%B501%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85/</id>
    <published>2020-08-27T02:10:29.000Z</published>
    <updated>2020-09-01T01:07:00.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h1><h2 id="新建虚拟机"><a href="#新建虚拟机" class="headerlink" title="新建虚拟机"></a>新建虚拟机</h2><p>使用VMWare WorkStation创建虚拟机（单机版只需要一台机器，集群版可以使用多台机器，下面示例中创建了3台虚拟机，配置均为 300G，16GB，4核处理器，系统镜像为 CentOS-7-x86_64-DVD-1810版本）</p><p><img src="https://i2.tiimg.com/726074/89154bfc28d26208.png" alt="新建向导1-创建包含空白硬盘的虚拟机"></p><p><img src="https://i2.tiimg.com/726074/c4f11c041dc337fa.png" alt="新建向导2-选择客户机操作系统"></p><p><img src="https://i2.tiimg.com/726074/1eaf6ac021042136.png" alt="新建向导3-命名虚拟机"></p><p><img src="https://i2.tiimg.com/726074/18eb58f7c246e1bd.png" alt="新建向导4-指定磁盘容量">                         </p><p><img src="https://i2.tiimg.com/726074/c61093a659d32204.png" alt="新建向导5-配置硬件信息"></p><p><img src="https://i2.tiimg.com/726074/df56b15fb12f2fc7.png" alt="新建向导5-配置硬件信息"></p><p><img src="https://i2.tiimg.com/726074/a5708abe2935f37f.png" alt="虚拟机详细配置信息">                                       </p><h2 id="配置操作系统"><a href="#配置操作系统" class="headerlink" title="配置操作系统"></a>配置操作系统</h2><p><strong>启动虚拟机，加载并配置操作系统</strong></p><p><img src="https://i2.tiimg.com/726074/65977403c14d0be4.png" alt="选择默认语言">     </p><p>  <img src="https://i2.tiimg.com/726074/c1b032023a455553.png" alt="image.png"></p><p>此处选择默认语言为【简体中文】，可以直接在编辑框输入快速查找。下一步则需要配置系统的软件、磁盘分区、网络等信息。</p><p><img src="https://i2.tiimg.com/726074/07cb7dde684ceed8.png" alt="详细配置"></p><p>这里需要注意的是详细配置图中标注的1，2，3。本例中详细的配置如下：</p><p><img src="https://i2.tiimg.com/726074/bb8187d72aac1f05.png" alt="软件选择"></p><p>本例中选择的是GNOME桌面版的软件，已选环境附加选项可根据实际需要选择，选择桌面版的可视化环境有利于后续工作的进行。下一步选择安装目标位置中提前配置分区信息尤为重要！！！</p><p><img src="https://i2.tiimg.com/726074/6d2573e8d831fbfe.png" alt="安装目标位置1-重新配置分区"></p><p><img src="https://i2.tiimg.com/726074/6660030a861e7450.png" alt="安装目标位置2-选择自动创建分区"></p><p><img src="https://i2.tiimg.com/726074/775d2f261664aa51.png" alt="安装目标位置3-重新配置分区磁盘"></p><p>官方文档中建议全部磁盘挂载到新建的用户app下，但是本例中将大部分磁盘挂载到root下，经实践是有效的，在如上配置之后点击【完成】即可完成磁盘及分区的配置。</p><p>下一步需要提前完成系统网络信息的配置，如主机名、ip、子网掩码、DNS、路由信息等。</p><p><img src="https://i2.tiimg.com/726074/0bbcf0a30e5a05c1.png" alt="配置主机名"></p><p>点击【配置】可进入ip、DNS等信息的配置。</p><p><img src="https://i2.tiimg.com/726074/34d23c8ae8c7d96f.png" alt="网络信息详细配置"></p><p>在上图的配置中需要注意的是，选择手动配置IPv4的信息，地址、子网掩码和网关需要配置正确，本例中DNS服务器默认为网关信息。网络信息配置完成之后可以【开启】以太网的连接，详细的信息可以参考下图</p><p><img src="https://i2.tiimg.com/726074/0a5251eeb05aaf7d.png" alt="网络配置详细信息"></p><p>1，2，3的所有信息完成配置之后点击【开始安装】则进入安装界面，此时可以配置系统root用户的密码以及新建用户。本例中遵循官方文档创建用户 app，在“高级用户配置”中，编辑app分属apps组，用户id为6000。</p><p><img src="https://i2.tiimg.com/726074/5b9f20707763fb54.png" alt="安装进度页面"></p><p><img src="https://i2.tiimg.com/726074/211dae0da29db0ae.png" alt="高级用户配置"></p><p>等待安装完成，【重启】即可进入桌面版的centos7 操作系统。</p><p><img src="https://i2.tiimg.com/726074/c22f8cb802262f87.png" alt="等待重启"></p><p>初始设置需要接受许可证协议，【完成配置】即可登录输入密码，进入系统。</p><p><img src="https://i2.tiimg.com/726074/a634908789cbb0a6.png" alt="许可证"></p><p><strong>提示：</strong>在实际操作中无需一步步按照上述步骤创建三台或多台虚拟机，在创建完成一台虚拟机之后可以通过“克隆”操作得到已安装完成的虚拟机镜像，这样可以在一定程度上节约创建虚拟机的时间，需要注意的是，在克隆完成启动之前需要重新生成机器的mac地址，否则会造成mac冲突。因为原始虚拟机使用的是静态地址，所以在开启之后需要重新对副本虚拟机分配静态IP。</p><p>克隆方法主要是： 点击 <strong>虚拟机-管理-克隆</strong>  使用克隆虚拟机向导</p><p><img src="https://i2.tiimg.com/726074/cc8c06ec9306c7ee.png" alt="克隆虚拟机01"></p><p><img src="https://i2.tiimg.com/726074/f4890c2edc6d3bb3.png" alt="克隆虚拟机02"></p><p><img src="https://i2.tiimg.com/726074/194b776452661499.png" alt="克隆虚拟机03"></p><p><strong>重命名和选择虚拟机所在路径之后点击【完成】即可。</strong></p><p><img src="https://i2.tiimg.com/726074/7231414d603260c5.png" alt="重命名01"></p><p><img src="https://i2.tiimg.com/726074/589d26d2952860c4.png" alt="重命名02"></p><p><img src="https://i2.tiimg.com/726074/bd2662f83ef7ce1c.png" alt="克隆完成后的配置"></p><p>打开虚拟机之后可以使用  ifconfig查看网络配置信息</p><p><img src="https://i2.tiimg.com/726074/dad1a31fd9322fe7.png" alt="查看配置"></p><p>需要更改的信息有 主机名、ip</p><p><img src="https://i2.tiimg.com/726074/50130340c6d9654e.png" alt="修改信息01"></p><p>配置IP信息主要路径在 /etc/sysconfig/network-script，修改 sysconf-ens33 （ens33指的是网卡名称）</p><p>文件中可以修改的有是否静态ip，PROTO一项改为 static  配置ip地址，子网掩码，网关，dns</p><p><img src="https://i2.tiimg.com/726074/666c8e958b48f118.png" alt="修改信息02"></p><p>进入编辑页面</p><p><img src="https://i2.tiimg.com/726074/301894f1f186c05c.png" alt="修改信息03"></p><p>半角状态输入’i’可修改内容，修改完成如下，Esc退出编辑，”:wq”可以保存修改并退出vim编辑页面</p><p><img src="https://i2.tiimg.com/726074/769a038f27cc4adb.png" alt="修改信息04"></p><p>重启之后使用ifconfig查看，ip已经改变。</p><p>克隆得到另外两台虚拟机，按上述步骤修改IP信息之后即完成了本例中的创建虚拟机步骤。</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;创建虚拟机&quot;&gt;&lt;a href=&quot;#创建虚拟机&quot; class=&quot;headerlink&quot; title=&quot;创建虚拟机&quot;&gt;&lt;/a&gt;创建虚拟机&lt;/h1&gt;&lt;h2 id=&quot;新建虚拟机&quot;&gt;&lt;a href=&quot;#新建虚拟机&quot; class=&quot;headerlink&quot; title=&quot;新建虚</summary>
      
    
    
    
    <category term="联邦学习" scheme="http://yoursite.com/categories/%E8%81%94%E9%82%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="FATE" scheme="http://yoursite.com/tags/FATE/"/>
    
    <category term="FL" scheme="http://yoursite.com/tags/FL/"/>
    
  </entry>
  
  <entry>
    <title>HashMap解析</title>
    <link href="http://yoursite.com/2020/08/22/HashMap%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2020/08/22/HashMap%E8%A7%A3%E6%9E%90/</id>
    <published>2020-08-22T15:25:32.000Z</published>
    <updated>2020-09-01T01:07:00.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HashMap继承体系"><a href="#HashMap继承体系" class="headerlink" title="HashMap继承体系"></a>HashMap继承体系</h1><p><img src="http://i1.fuimg.com/726074/1872c236e17296ec.png" alt="HashMap继承体系"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HashMap继承体系&quot;&gt;&lt;a href=&quot;#HashMap继承体系&quot; class=&quot;headerlink&quot; title=&quot;HashMap继承体系&quot;&gt;&lt;/a&gt;HashMap继承体系&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://i1.fuimg.com/7260</summary>
      
    
    
    
    
    <category term="HashMap" scheme="http://yoursite.com/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>讨论社区46  -  项目总结</title>
    <link href="http://yoursite.com/2019/08/30/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA46%20-%20%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/08/30/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA46%20-%20%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</id>
    <published>2019-08-30T15:13:20.000Z</published>
    <updated>2020-09-01T01:07:00.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><ul><li><p>Spring Boot Testing</p><ul><li>依赖：spring-boot-starter-test</li><li>包括：Junit、Spring Test 、AssertJ、…</li></ul></li><li><p>Test Case</p><ul><li>要求：保证测试方法的独立性。</li><li>步骤：初始化数据、执行测试代码、验证测试结果、清理测试数据。</li><li>常用注解：@BeforeClass、@AfterClass、@Before、@After。</li></ul></li></ul><h1 id="项目监控"><a href="#项目监控" class="headerlink" title="项目监控"></a>项目监控</h1><ul><li>Spring Boot Actuator<ul><li>Endpoints: 监控应用的入口，Spring Boot内置了很多端点，也支持自定义端点。</li><li>监控方式：HTTP或JMX。</li><li>访问路径：例如“/actuator/health”。</li><li>注意事项：按需配置暴露的端点，并对所有端点进行权限控制。</li></ul></li></ul><h1 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h1><ul><li>浏览器访问Nginx（负责分发请求，反向代理）</li><li>Tomcat服务器（装JRE和Maven）</li><li>MySQL、Redis、Kafka、Elasticsearch、Wkhtmltopdf</li><li>Putty(访问服务器的客户端)</li></ul><h1 id="项目总结"><a href="#项目总结" class="headerlink" title="项目总结"></a>项目总结</h1><ul><li>Spring Boot</li><li><strong>Spring</strong></li><li>Spring MVC、Spring Mybatis、<strong>Spring Security</strong></li><li>权限@会话管理<ul><li>注册、登录、退出、状态、设置、授权</li><li>Spring Email、<strong>Interceptor</strong></li></ul></li><li>核心@敏感词、@事务<ul><li>首页、帖子、评论、私信、异常、日志</li><li>Advice、<strong>AOP</strong>、<strong>Transaction</strong></li></ul></li><li>性能@数据结构<ul><li>点赞、关注、统计、缓存</li><li><strong>Redis</strong></li></ul></li><li>通知@模式<ul><li>系统通知</li><li>Kafka</li></ul></li><li>搜索@索引<ul><li>全文搜索</li><li>Elasticsearch</li></ul></li><li>其他@线程池、@缓存<ul><li>排行、上传、服务器缓存</li><li>Quartz、<strong>Caffeine</strong></li></ul></li></ul><p>动态请求：客户端–&gt;Nginx主(从)–&gt;Sever(community-&gt;本地缓存)–&gt;Redis、DB、Kafka、Elasticsearch、文件服务器（七牛云）</p><p>静态资源：客户端–&gt; 部署到CDN缓存服务（全国都有服务器，就近加载）</p><h1 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h1><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><ul><li>存储引擎<ul><li>InnoDB支持事务（Transations）</li></ul></li><li>事务<ul><li>事务的特性：原子性、一致性、隔离性、持久性</li><li>事务的隔离<ul><li>并发异常：第一类丢失更新、第二类丢失更新、脏读、不可重复读、幻读</li><li>隔离级别：Read Uncommited、Read Committed、Repeatable Read、Serializable</li><li>Spring事务管理：声明式事务、编程式事务</li></ul></li></ul></li><li>锁<ul><li>范围<ul><li>表级锁：开销小、加锁快，发生锁冲突的概率高、并发度低，不会出现死锁。</li><li>行级锁：开销大、加锁慢，发生锁冲突的概率低、并发度高，会出现死锁。</li></ul></li></ul></li><li>索引（InnoDB）<ul><li>共享锁（S）：行级，读取一行；</li><li>排他锁（X）：表级，更新一行；</li><li>意向共享锁（IS）：表级，准备加共享锁；</li><li>意向排他锁（IX）：表级，准备加排他锁；</li><li>间隙锁（NK）：行级，使用范围条件时，对范围内不存在的记录加锁。一是为了防止幻读，二是为了满足恢复和复制的需要。</li></ul></li></ul><table><thead><tr><th align="center"></th><th align="center">IS</th><th align="center">IX</th><th align="center">S</th><th align="center">X</th></tr></thead><tbody><tr><td align="center">IS</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">x</td></tr><tr><td align="center">IX</td><td align="center"></td><td align="center"></td><td align="center">x</td><td align="center">x</td></tr><tr><td align="center">S</td><td align="center"></td><td align="center">x</td><td align="center"></td><td align="center">x</td></tr><tr><td align="center">X</td><td align="center">x</td><td align="center">x</td><td align="center">x</td><td align="center">x</td></tr></tbody></table><ul><li><p>加锁</p><ul><li>增加行级锁之前，InnoDB会自动给表加意向锁；</li><li>执行DML语句时，InnoDB会自动给数据加排他锁；</li><li>执行DQL语句时<ul><li>共享锁（S）：SELECT…FROM…WHERE…LOCK IN SHARE MODE;</li><li>排他锁（X）：SELECT…FROM…WHERE…FOR UPDATE;</li><li>间隙锁（NK）：上述SQL采用范围条件时，InnoDB对不存在的记录自动增加间隙锁。</li></ul></li></ul></li><li><p>死锁</p><ul><li>场景<ul><li>事务1：UPDATE T SET…WHERE ID=1;UPDATE T SET…WHERE ID=2;</li><li>事务2：UPDATE T SET…WHERE ID=2;UPDATE T SET…WHERE ID=1;</li></ul></li><li>解决方案<ul><li>一般InnoDB会自动检测到，并使一个事务回滚，另一个事务继续；</li><li>设置超时等参数 innodb_lock_wait_timeout；</li></ul></li><li>避免死锁<ul><li>不同的业务并发访问多个表时，应约定以相同的顺序来访问这些表；</li><li>以批量的方式处理数据时，应事先对数据排序，保证线程按固定的顺序来处理数据；</li><li>在事务中，如果要更新记录，应直接申请足够级别的锁，即排他锁；</li></ul></li></ul></li><li><p>悲观锁（数据库）</p></li><li><p>乐观锁（自定义）</p><ul><li><p>版本号机制</p><ul><li>UPDATE..SET…,VERSION=#{version+1} WHERE … AND … VERSION=#{version}</li></ul></li><li><p>CAS算法（Compare and swap）</p><p>是一种无锁的算法，该算法涉及3个操作数（内存值V、旧值A、新值B），当V等于A时，采用原子方式用B的值更新V的值。该算法通常采用自旋操作，也叫自旋锁。它的缺点是：</p><ul><li>ABA问题：某线程将A改为B，再改回A，则CAS会误认为A没被修改过。</li><li>自旋操作采用循环的方式实现，若加锁时间长，则会给CPU带来巨大的开销。</li><li>CAS只能保证一个共享变量的原子操作。</li></ul></li></ul></li><li><p>B+Tree(InnoDB)</p><ul><li>数据分块存储，每一块称为一页；</li><li>所有值都是按顺序存储的，并且每一个叶子到根的距离相同；</li><li>非叶子节点存储数据的边界，叶子节点存储指向数据行的指针；</li><li>通过边界缩小数据的范围，从而避免全表扫描，加快了查找的速度。</li></ul></li></ul><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><ul><li>数据类型</li></ul><table><thead><tr><th align="center">数据类型</th><th align="center">最大存储数据量</th></tr></thead><tbody><tr><td align="center">key</td><td align="center">512M</td></tr><tr><td align="center">string</td><td align="center">512M</td></tr><tr><td align="center">hash</td><td align="center">2^32-1</td></tr><tr><td align="center">list</td><td align="center">2^32-1</td></tr><tr><td align="center">set</td><td align="center">2^32-1</td></tr><tr><td align="center">sorted set</td><td align="center">官方没给</td></tr><tr><td align="center">bitmap</td><td align="center">512M</td></tr><tr><td align="center">hyperloglog</td><td align="center">12K</td></tr></tbody></table><ul><li><p>过期策略</p><p>Redis会把设置了过期时间的key放入一个独立的字典里，在key过期时并不会立刻删除它。</p><p>Redis会通过如下两种策略，来删除过期的key：</p><ul><li><p>惰性删除</p><p>客户端访问某个key时，Redis会检查该key是否过期，若过期则删除。</p></li><li><p>定期扫描</p><p>Redis默认每秒执行10次过期扫描（配置hz选项），扫描策略如下：</p><ol><li>从过期字典中随机选择20个key；</li><li>删除这20个key中已过期的key；</li><li>如果过期的key的比例超过25%，则重复步骤1；</li></ol></li></ul></li><li><p>淘汰策略</p><p>当Redis占用内存超出最大限制（maxmemory）时，可采用如下策略（maxmemory-policy），让Redis淘汰一些数据，以腾出空间继续提供读写服务：</p><ul><li>noeviction：对可能导致增大内存的命令返回错误（大多数写命令，DEL除外）；</li><li>volatile-ttl：在设置了过期时间的key中，选择剩余寿命（TTL）最短的key，将其淘汰；</li><li>volatile-lru：在设置了过期时间的key中，选择最少使用的key（LRU），将其淘汰；</li><li>volatile-random：在设置了过期时间的key中，随机选择一些key，将其淘汰；</li><li>allkeys-lru：在所有的key中，选择最少使用的key（LRU），将其淘汰；</li><li>allkeys-random：在所有的key中，随机选择一些key，将其淘汰；</li></ul><p>LRU算法：</p><ul><li>维护一个链表，用于顺序存储被访问过的key。在访问数据时，最新访问过的key将被移动到表头，即最近访问的key在表头，最少访问的key在表尾。</li></ul><p>近似LRU算法（Redis）</p><ul><li>给每个key维护一个时间戳，淘汰时随机采样5个key，从中淘汰掉最旧的key。如果还是超出内存限制，则继续随机采样淘汰。</li><li>优点：比LRU算法节约内存，却可以取得非常近似的效果。</li></ul></li><li><p>缓存穿透</p><ul><li><p>场景</p><p>查询根本不存在的数据，使得请求直达存储层，导致其负载过大，甚至宕机。</p></li><li><p>解决方案：</p><ol><li>缓存空对象：存储层未命中后，仍然将空值存入缓存层。再次访问该数据时，缓存层会直接返回空值。</li><li>布隆过滤器：将所有存在的key提前存入布隆过滤器，在访问缓存层之前，先通过过滤器拦截，若请求的是不存在的key，则直接返回空值。</li></ol></li></ul></li><li><p>缓存击穿</p><ul><li><p>场景</p><p>一份热点数据，它的访问量非常大。在其缓存失效瞬间，大量请求直达存储层，导致服务崩溃。</p></li><li><p>解决方案：</p><ol><li>加互斥锁：对数据的访问加互斥锁，当一个线程访问该数据时，其他线程只能等待。这个线程访问过后，缓存中的数据将被 重建，届时其他线程就可以直接从缓存取值。</li><li>永不过期：不设置过期时间，所以不会出现上述问题，这是“物理“上的不过期。为每个value设置逻辑过期时间，当发现该值逻辑过期时，使用单独的线程重建缓存。</li></ol></li></ul></li><li><p>缓存雪崩</p><ul><li><p>场景</p><p>由于某些原因，缓存层不能提供服务，导致所有请求直达存储层，造成存储层宕机。</p></li><li><p>解决方案：</p><ol><li>避免同时过期：设置过期时间时，附加一个随机数，避免大量的key同时过期。</li><li>构建高可用的Redis缓存：部署多个Redis实例，个别节点宕机，依然可以保持服务的整体可用。</li><li>构建多级缓存：增加本地缓存，在存储层前面多加一级屏障，降低请求直达存储层的几率。</li><li>启用限流和降级措施：对存储层增加限流措施，当请求超出限制时，对其提供降级服务。</li></ol></li></ul></li><li><p>分布式锁</p><ul><li><p>场景</p><p>修改时，经常需要将数据读取到内存，在内存中修改后再存回去。在分布式应用中，可能多个进程同时执行上述操作，而读取和修改非原子操作，所以会产生冲突。增加分布式锁，可以解决此类问题。</p></li><li><p>基本原理</p><ul><li>同步锁：在多个线程都能访问到的地方，做一个标记，标识该数据的访问权限。</li><li>分布式锁：在多个进程都能访问到的地方，做一个标记，标识该数据的访问权限。</li></ul></li><li><p>实现方式</p><ol><li>基于数据库实现分布式锁；</li><li>基于Redis实现分布式锁；</li><li>基于Zookeeper实现分布式锁；</li></ol></li><li><p>Redis实现分布式锁的原则</p><ol><li>安全属性：独享。在任一时刻，只有一个客户端持有锁。</li><li>活性A：无死锁。即便持有锁的客户端崩溃或者网络被分裂，锁仍然可以被获取。</li><li>活性B：容错。只要大部分Redis节点都活着，客户端就可以获取和释放锁。</li></ol></li><li><p>单Redis实例实现分布式锁</p><ol><li><p>获取锁使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET resource_name my_random_value NX PX 30000</span><br></pre></td></tr></table></figure><p>NX：仅在key不存在时才执行成功。PX：设置锁的自动过期时间。</p></li><li><p>通过Lua脚本释放锁：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if redis.call(&quot;get&quot;,KEYS[1]) &#x3D;&#x3D; ARGV[1] then </span><br><span class="line">return redis.call(&quot;del&quot;,KEYS[1])</span><br><span class="line">else return 0 end</span><br></pre></td></tr></table></figure><p>可以避免删除别的客户端获取成功的锁：</p><p>A加锁 –&gt; A阻塞 –&gt; 因超时释放锁 –&gt; B加锁 –&gt; A恢复 –&gt; 释放锁</p></li></ol></li><li><p>多Redis实例实现分布式锁</p><p>Redlock算法，该算法有现成的实现，其Java版本的库为Redisson。</p><ol><li>获取当前Unix时间，以毫秒为单位。</li><li>依次尝试从N个实例，使用相同的key和随机值获取锁，并设置响应超时时间。如果服务器没有在规定时间内响应，客户端应该尽快尝试另外一个Redis实例。</li><li>客户端使用当前时间减去开始获取锁的时间，得到获取锁使用的时间。当且仅当大多数的Redis节点都取到锁，并且使用的时间小于锁失效的时间时，锁才算取得成功。</li><li>如果取到了锁，key的真正有效时间等于有效时间减去获取锁使用的时间。</li><li>如果获取锁失败，客户端应该在所有的Redis实例上进行解锁。</li></ol></li></ul></li></ul><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><ul><li>Spring IOC<ul><li>Bean的作用域</li></ul></li></ul><table><thead><tr><th align="center">作用域</th><th align="center">使用范围</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">singleton</td><td align="center">所有Spring应用</td><td align="center">在容器中只存在一个实例，默认值。</td></tr><tr><td align="center">prototype</td><td align="center">所有Spring应用</td><td align="center">在容器中存在多个实例，即每次获取该Bean时，都会创建一个新实例。</td></tr><tr><td align="center">request</td><td align="center">SpringWeb应用</td><td align="center">为每个请求创建一个新的实例。</td></tr><tr><td align="center">session</td><td align="center">SpringWeb应用</td><td align="center">为每个会话创建一个新的实例。</td></tr><tr><td align="center">globalSession</td><td align="center">SpringWeb应用</td><td align="center">为全局的session创建一个实例，只在Portlet上下文中有效。</td></tr><tr><td align="center">application</td><td align="center">SpringWeb应用</td><td align="center">为整个Web应用创建一个新的实例。</td></tr></tbody></table><ul><li><p>Spring AOP</p><ul><li><p>AOP的术语</p><p>Target（Joinpoint）&lt;– Weaving &lt;– Aspect(Pointcut(s.find*(..))、Advice(q前、后、返回、异常))</p><ol><li>编译时织入，需使用特殊的编译器。</li><li>装载时织入，需使用特殊的类装载器。</li><li>运行时织入，需为目标生成代理对象。</li></ol></li></ul></li><li><p>Spring MVC</p><ol><li><strong>客户端</strong>发出请求访问服务器时，由<strong>DispatcherServlet</strong>处理。</li><li>DispatcherServlet调用<strong>HandlerMapping</strong>(根据访问路径找到对应Controller)。</li><li>HandlerMapping给DispatcherServlet返回<strong>HandlerExecutionChain</strong>对象（封装了Controller和拦截器）。</li><li>DispatcherServlet调用拦截器的preHandle()方法，接着调用<strong>HandlerAdapter</strong>(内部调了Controller)。</li><li>HandlerAdapter返回<strong>ModelAndView</strong>给DispatcherServlet，返回后调用postHandle()方法。</li><li>DispatcherServlet调用<strong>ViewResolver</strong>(视图解析器)。</li><li>ViewResolver解析<strong>View</strong>，由模板引擎渲染，（拦截器的afterCompletion()方法）返回客户端。</li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;单元测试&quot;&gt;&lt;a href=&quot;#单元测试&quot; class=&quot;headerlink&quot; title=&quot;单元测试&quot;&gt;&lt;/a&gt;单元测试&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Spring Boot Testing&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;依赖：spring-boot-start</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>讨论社区45  -  优化网站性能</title>
    <link href="http://yoursite.com/2019/08/25/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA45%20-%20%E4%BC%98%E5%8C%96%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD/"/>
    <id>http://yoursite.com/2019/08/25/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA45%20-%20%E4%BC%98%E5%8C%96%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD/</id>
    <published>2019-08-25T15:29:20.000Z</published>
    <updated>2020-09-01T01:07:00.680Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>本地缓存</p><ul><li>将数据缓存在应用服务器上，性能最好。</li><li>常用缓存工具：Ehcache、Cuava、<a href="https://github.com/ben-manes/caffeine">Caffeine</a>等。</li></ul></li><li><p>分布式缓存</p><ul><li>将数据缓存在NoSQL数据库上，跨服务器。</li><li>常用缓存工具：MemCache、Redis等。</li></ul></li><li><p>多级缓存</p><ul><li>-&gt;一级缓存（本地缓存）-&gt;二级缓存（分布式缓存）-&gt; DB</li><li>避免缓存雪崩（缓存失效，大量请求直达DB），提高系统的可用性。</li></ul><p>尽最大可能避免直接访问数据库！</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ben-manes.caffeine<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>caffeine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;本地缓存&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将数据缓存在应用服务器上，性能最好。&lt;/li&gt;
&lt;li&gt;常用缓存工具：Ehcache、Cuava、&lt;a href=&quot;https://github.com/ben-manes/caffeine&quot;&gt;Caffeine&lt;/a&gt;等</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="性能优化" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="缓存" scheme="http://yoursite.com/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>讨论社区44  -  文件上传至云服务器</title>
    <link href="http://yoursite.com/2019/08/23/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA44%20-%20%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%87%B3%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2019/08/23/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA44%20-%20%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%87%B3%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2019-08-23T14:10:29.000Z</published>
    <updated>2020-09-01T01:07:00.680Z</updated>
    
    <content type="html"><![CDATA[<ul><li>客户端上传<ul><li>客户端将数据提交给云服务器，并等待其响应。</li><li>用户上传头像时，将表单数据提交给云服务器。</li></ul></li><li>服务器直传<ul><li>应用服务器将数据直接提交给云服务器，并等待其响应。</li><li>分享时，服务端将自动生成的图片，直接提交给云服务器。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;客户端上传&lt;ul&gt;
&lt;li&gt;客户端将数据提交给云服务器，并等待其响应。&lt;/li&gt;
&lt;li&gt;用户上传头像时，将表单数据提交给云服务器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;服务器直传&lt;ul&gt;
&lt;li&gt;应用服务器将数据直接提交给云服务器，并等待其响应。&lt;/li</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>讨论社区43  -  生成长图</title>
    <link href="http://yoursite.com/2019/08/21/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA43%20-%20%E7%94%9F%E6%88%90%E9%95%BF%E5%9B%BE/"/>
    <id>http://yoursite.com/2019/08/21/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA43%20-%20%E7%94%9F%E6%88%90%E9%95%BF%E5%9B%BE/</id>
    <published>2019-08-21T15:13:16.000Z</published>
    <updated>2020-09-01T01:07:00.680Z</updated>
    
    <content type="html"><![CDATA[<ul><li>wkhtmltopdf<ul><li>wkhtmltopdf url file    模板内容转成PDF</li><li>wkhtmltoimage url file   网页内容转成图片</li></ul></li></ul><p><a href="https://wkhtmltopdf.org/">https://wkhtmltopdf.org</a></p><p>软件下载，建议将bin配置到环境变量</p><ul><li>java<ul><li><code>Runtime.getRuntime().exec()</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WkTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String cmd = <span class="string">&quot;D:/Program Files/wkhtmltopdf/bin/wkhtmltoimage --quality 75  https://www.nowcoder.com d:/work/data/wk-images/3.png&quot;</span>;</span><br><span class="line">        String cmd1 = <span class="string">&quot;D:/Program Files/wkhtmltopdf/bin/wkhtmltopdf https://www.nowcoder.com d:/work/data/wk-pdfs/1.pdf&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(cmd1);</span><br><span class="line">            System.out.println(<span class="string">&quot;ok.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;wkhtmltopdf&lt;ul&gt;
&lt;li&gt;wkhtmltopdf url file    模板内容转成PDF&lt;/li&gt;
&lt;li&gt;wkhtmltoimage url file   网页内容转成图片&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>讨论社区42  -  热帖排行</title>
    <link href="http://yoursite.com/2019/08/21/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA42%20-%20%E7%83%AD%E5%B8%96%E6%8E%92%E8%A1%8C/"/>
    <id>http://yoursite.com/2019/08/21/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA42%20-%20%E7%83%AD%E5%B8%96%E6%8E%92%E8%A1%8C/</id>
    <published>2019-08-21T13:14:16.000Z</published>
    <updated>2020-09-01T01:07:00.680Z</updated>
    
    <content type="html"><![CDATA[<p>Hacker News</p><p><code>Score = (P-1) / (T+2) ^G</code></p><p>StackOverflow</p><p><code>&#123; (log(Qviews)*4)  + ((Qanswers * Qscore) / 5)  + sum(Ascores) &#125;  /  &#123; ((QageInhours  + 1 )  -  (( QageInHours  -  Qupdated ) / 2)) ^ 1.5 &#125;</code></p><p>牛客：</p><p><code>log(精华分 + 评论数 * 10 + 点赞数 * 2+ 收藏数 * 2) +（发布时间 - 牛客纪元）</code></p><ul><li>在发帖、加精、点赞、评论时计算帖子分数（存入Redis中）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发帖时 -- DiscussPostController</span></span><br><span class="line"><span class="comment">// 计算帖子分数</span></span><br><span class="line">String redisKey = RedisKeyUtil.getPostScoreKey();</span><br><span class="line">redisTemplate.opsForSet().add(redisKey, post.getId());</span><br><span class="line"></span><br><span class="line"><span class="comment">//加精时 -- DiscussPostController</span></span><br><span class="line"><span class="comment">// 计算帖子分数</span></span><br><span class="line">String redisKey = RedisKeyUtil.getPostScoreKey();</span><br><span class="line">redisTemplate.opsForSet().add(redisKey, id);</span><br><span class="line"></span><br><span class="line"><span class="comment">//点赞时 -- LikeController</span></span><br><span class="line"><span class="keyword">if</span>(entityType == ENTITY_TYPE_POST) &#123;</span><br><span class="line">    <span class="comment">// 计算帖子分数</span></span><br><span class="line">    String redisKey = RedisKeyUtil.getPostScoreKey();</span><br><span class="line">    redisTemplate.opsForSet().add(redisKey, postId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//评论时 -- CommentController</span></span><br><span class="line"><span class="comment">// 计算帖子分数</span></span><br><span class="line">String redisKey = RedisKeyUtil.getPostScoreKey();</span><br><span class="line">redisTemplate.opsForSet().add(redisKey, discussPostId);</span><br></pre></td></tr></table></figure><ul><li>新建<code>PostScoreRefreshJob</code>类进行处理</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hacker News&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Score = (P-1) / (T+2) ^G&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;StackOverflow&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;#123; (log(Qviews)*4)  + ((Qanswers * Qscore)</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>讨论社区41  -  任务执行和调度</title>
    <link href="http://yoursite.com/2019/08/20/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA41%20-%20%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E5%92%8C%E8%B0%83%E5%BA%A6/"/>
    <id>http://yoursite.com/2019/08/20/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA41%20-%20%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E5%92%8C%E8%B0%83%E5%BA%A6/</id>
    <published>2019-08-20T13:43:15.000Z</published>
    <updated>2020-09-01T01:07:00.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JDK线程池"><a href="#JDK线程池" class="headerlink" title="JDK线程池"></a>JDK线程池</h1><ul><li>ExecutorService</li><li>ScheduledExecutorService(可以执行定时任务)</li></ul><p>没有解决分布式部署的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JDK普通线程池</span></span><br><span class="line"><span class="keyword">private</span> ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// JDK可执行定时任务的线程池</span></span><br><span class="line"><span class="keyword">private</span> ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. JDK 普通线程池</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExecutorService</span><span class="params">()</span></span>&#123;</span><br><span class="line">Runnable task = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">logger.debug(<span class="string">&quot;hello ExecutorService&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">executorService.submit(task);</span><br><span class="line">&#125;</span><br><span class="line">sleep(<span class="number">10000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.JDK可执行定时任务的线程池</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testScheduledExecutorService</span><span class="params">()</span></span>&#123;</span><br><span class="line">Runnable task = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">logger.debug(<span class="string">&quot;hello ScheduledExecutorService&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">scheduledExecutorService.scheduleAtFixedRate(task, <span class="number">10000</span>, <span class="number">1000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">10000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring-线程池"><a href="#Spring-线程池" class="headerlink" title="Spring 线程池"></a>Spring 线程池</h1><ul><li>ThreadPoolTaskExecutor</li><li>ThreadPoolTaskScheduler（分布式环境可能出问题）</li></ul><h2 id="正常版"><a href="#正常版" class="headerlink" title="正常版"></a>正常版</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. Spring 普通线程池</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testThreadPoolExecutor</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Runnable task = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;hello ThreadPoolExecutor&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        threadPoolExecutor.submit(task);</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(<span class="number">10000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. Spring 可执行定时任务的线程池</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testThreadPoolTaskScheduler</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Runnable task = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;hello ThreadPoolTaskScheduler&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    Date date = <span class="keyword">new</span> Date(System.currentTimeMillis()+<span class="number">10000</span>);</span><br><span class="line">    threadPoolTaskScheduler.scheduleAtFixedRate(task, date, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">10000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="简化版"><a href="#简化版" class="headerlink" title="简化版"></a>简化版</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//service中定义</span></span><br><span class="line"><span class="comment">// 让该方法在多线程环境下,被异步的调用.</span></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">logger.debug(<span class="string">&quot;execute1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Scheduled(initialDelay = 10000, fixedRate = 1000)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">logger.debug(<span class="string">&quot;execute2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5.Spring普通线程池(简化)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testThreadPoolTaskExecutorSimple</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        alphaService.execute1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">10000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.Spring定时任务线程池(简化)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testThreadPoolTaskSchedulerSimple</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     sleep(<span class="number">30000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分布式定时任务"><a href="#分布式定时任务" class="headerlink" title="分布式定时任务"></a>分布式定时任务</h1><p><a href="http://www.quartz-scheduler.org/">http://www.quartz-scheduler.org</a></p><ul><li><p>Spring Quartz（将数据存储到数据库，分布式时可以共享数据）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>导入包之后还需要在数据库导入对应的表，可从<a href="https://github.com/quartz-scheduler/quartz/tree/9f9e400733f51f7cb658e3319fc2c140ab8af938/quartz-core/src/main/resources/org/quartz/impl/jdbcjobstore">Quartz-Github</a>根据数据库类型选择下载。</p><h2 id="Quartz-表介绍"><a href="#Quartz-表介绍" class="headerlink" title="Quartz 表介绍"></a>Quartz 表介绍</h2><p>​    Quartz的集群部署方案在架构上是分布式的，没有负责集中管理的节点，各节点间不会直接通信而是利用数据库锁的方式来实现集群环境下进行并发控制，所以Quartz集群化部署时必须要启用持久化配置。<br>分布式部署时需要保证各个节点的系统时间一致。Quartz默认提供了11张表。</p><p>​    本文使用的是<code>tables_mysql_innodb.sql</code>文件，它显示指定了使用innodb存储引擎，另一个<code>tables_mysql.sql</code>文件没有指定具体的存储引擎；本文将对这些张表做简单介绍。</p><p><img src="https://user-gold-cdn.xitu.io/2018/12/6/167819c7eaaa26d4?imageslim" alt="img"></p><p>​    前面6张都是关于各种triggers的信息，后面包括job，日程表，调度节点状态，悲观锁等信息；相关表操作在类<code>StdJDBCDelegate</code>中，相关sql语句在<code>StdJDBCConstants</code>中；</p></li></ul><p>  1.<code>qrtz_blob_triggers  </code></p><p>  用户自定义的Trigger使用Blob类型进行trigger详细信息的存储（这样设计，JobStore更容易通用），非自定义的Trigger不会存放在此表中;</p><p>  Quartz提供的triggers包括：<code>CronTrigger</code>，<code>CalendarIntervalTrigger</code>，  <code>DailyTimeIntervalTrigger</code>以及<code>SimpleTrigger</code>，这几个trigger信息会保存在后面的几张表中； </p><p>   2.<code>qrtz_cron_triggers </code></p><p>  存储<code>CronTrigger</code>的详细信息，这也是我们使用最多的触发器, 包括cron表达式，时区信息等; Spring对应的封装<code>CronTriggerFactoryBean</code></p><p>  3.<code>qrtz_simple_triggers  </code></p><p>  存储<code>SimpleTrigger</code>的详细信息,  包括重复次数，重复间隔时间和已经执行的次数等</p><p>  Spring对应的封装<code>SimpleTriggerFactoryBean</code></p><p>  4.<code>qrtz_simprop_triggers</code></p><p>  存储<code>CalendarIntervalTrigger</code>和<code>DailyTimeIntervalTrigger</code>两种类型的触发器</p><p>  Spring没有对应的封装类，可能因为这两种不常用，且基本上可以用<code>CronTrigger</code>来实现</p><p>  5.<code>qrtz_triggers</code></p><p>  存储所有Trigger(包括自带的4种Trigger和用户自定义Trigger)的通用动态信息；随着调度的触发<code>preFireTime</code>,<code>nextFireTime</code>, <code>triggerState</code>等都会相应的跟着变化</p><p>  6.<code>qrtz_fired_triggers</code></p><p>  存储即将触发或正在触发的trigger相关信息，trigger随着时间的推移状态发生变化，直到最后trigger执行完成，从表中被删除</p><p>  7.<code>qrtz_job_details</code></p><p>  存储jobDetails信息，相关信息在定义的时候指定，后续不会发生变化</p><p>  8.<code>qrtz_calendars</code></p><p>   Quartz为我们提供了日历的功能，可以自己定义多个时间段，可以控制触发器在这个时间段内不触发或者触发；实际使用中一般是用于定义多个不触发的时间段，用于排除特殊日期，节假日等</p><p>  系统提供6种类型：<code>AnnualCalendar</code>，<code>CronCalendar</code>，<code>DailyCalendar</code>，<code>HolidayCalendar</code>，<code>MonthlyCalendar</code>，<code>WeeklyCalendar</code></p><p>  9.<code>qrtz_paused_trigger_grps</code></p><p>  存储已暂停的Trigger组的信息，批量暂停Trigger时用到，不常用。</p><p>  10.<code>qrtz_scheduler_state</code></p><p>  开启集群功能时，存储Scheduler实例名称，检查周期，各节点最后活跃时间等信息；Quartz集群下的故障转移就是借助这个表来实现的</p><p>  11.<code>qrtz_locks</code></p><p>  Quartz提供的锁表，为多个节点调度提供分布式锁，实现分布式调度，默认有2个锁：STATE_ACCESS 主要用在scheduler定期检查是否有失效节点的时候，保证只有一个节点去检查和处理；</p><p>  TRIGGER_ACCESS 主要用在Trigger触发和触发完成的时候，保证只有一个节点去执行相应的逻辑， 当然也可以通过配置让Trigger在获取任务时也加锁</p><ul><li><p>核心调度接口<code>Scheduler</code></p></li><li><p>定义任务的接口Job的<code>execute</code>方法</p></li><li><p><code>Jobdetail</code>接口来配置Job的名字、组等</p></li><li><p><code>Trigger</code>接口配置Job的什么时候运行、运行频率</p></li><li><p><code>QuartzConfig</code>：配置 -&gt; 数据库 -&gt; 调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.wx.talking.quartz.AlphaJob;</span><br><span class="line"><span class="keyword">import</span> com.wx.talking.quartz.PostScoreRefreshJob;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobDataMap;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobDetail;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.JobDetailFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.SimpleTriggerFactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置 -&gt; 数据库 -&gt; 调用   //进第一次配置初始化到数据库</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// FactoryBean可简化Bean的实例化过程:</span></span><br><span class="line">    <span class="comment">// 1.通过FactoryBean封装Bean的实例化过程.</span></span><br><span class="line">    <span class="comment">// 2.将FactoryBean装配到Spring容器里.</span></span><br><span class="line">    <span class="comment">// 3.将FactoryBean注入给其他的Bean.</span></span><br><span class="line">    <span class="comment">// 4.该Bean得到的是FactoryBean所管理的对象实例.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置JobDetail</span></span><br><span class="line">    <span class="comment">// @Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JobDetailFactoryBean <span class="title">alphaJobDetail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JobDetailFactoryBean factoryBean = <span class="keyword">new</span> JobDetailFactoryBean();</span><br><span class="line">        factoryBean.setJobClass(AlphaJob.class);</span><br><span class="line">        factoryBean.setName(<span class="string">&quot;alphaJob&quot;</span>);</span><br><span class="line">        factoryBean.setGroup(<span class="string">&quot;alphaJobGroup&quot;</span>);</span><br><span class="line">        factoryBean.setDurability(<span class="keyword">true</span>); <span class="comment">// 设置任务是否持久保存</span></span><br><span class="line">        factoryBean.setRequestsRecovery(<span class="keyword">true</span>); <span class="comment">// 任务是否可恢复</span></span><br><span class="line">        <span class="keyword">return</span> factoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置Trigger(SimpleTriggerFactoryBean, CronTriggerFactoryBean)</span></span><br><span class="line">    <span class="comment">// @Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleTriggerFactoryBean <span class="title">alphaTrigger</span><span class="params">(JobDetail alphaJobDetail)</span> </span>&#123;</span><br><span class="line">        SimpleTriggerFactoryBean factoryBean = <span class="keyword">new</span> SimpleTriggerFactoryBean();</span><br><span class="line">        factoryBean.setJobDetail(alphaJobDetail);</span><br><span class="line">        factoryBean.setName(<span class="string">&quot;alphaTrigger&quot;</span>);</span><br><span class="line">        factoryBean.setGroup(<span class="string">&quot;alphaTriggerGroup&quot;</span>);</span><br><span class="line">        factoryBean.setRepeatInterval(<span class="number">3000</span>);</span><br><span class="line">        factoryBean.setJobDataMap(<span class="keyword">new</span> JobDataMap());</span><br><span class="line">        <span class="keyword">return</span> factoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li>FactoryBean可简化Bean的实例化过程:<ol><li>通过FactoryBean封装Bean的实例化过程</li><li>将FactoryBean装配到Spring容器里</li><li>将FactoryBean注入给其他的Bean.</li><li>该Bean得到的是FactoryBean所管理的对象实例.</li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JDK线程池&quot;&gt;&lt;a href=&quot;#JDK线程池&quot; class=&quot;headerlink&quot; title=&quot;JDK线程池&quot;&gt;&lt;/a&gt;JDK线程池&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;ExecutorService&lt;/li&gt;
&lt;li&gt;ScheduledExecutorServic</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="线程池" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>讨论社区40  -  网站数据统计</title>
    <link href="http://yoursite.com/2019/08/18/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA40%20-%20%E7%BD%91%E7%AB%99%E6%95%B0%E6%8D%AE%E7%BB%9F%E8%AE%A1/"/>
    <id>http://yoursite.com/2019/08/18/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA40%20-%20%E7%BD%91%E7%AB%99%E6%95%B0%E6%8D%AE%E7%BB%9F%E8%AE%A1/</id>
    <published>2019-08-18T14:26:50.000Z</published>
    <updated>2020-09-01T01:07:00.680Z</updated>
    
    <content type="html"><![CDATA[<h3 id="UV-Unique-Visitor"><a href="#UV-Unique-Visitor" class="headerlink" title="UV(Unique Visitor)"></a>UV(Unique Visitor)</h3><ul><li>独立访客，需通过用户IP排重新统计数据。</li><li>每次访问都要进行统计。</li><li>HyperLoglog,性能好，且存储空间小。</li></ul><h3 id="DAU-Daily-Active-User"><a href="#DAU-Daily-Active-User" class="headerlink" title="DAU(Daily Active User)"></a>DAU(Daily Active User)</h3><ul><li>日活跃用户，需通过用户ID排重新统计数据。</li><li>访问过一次，则认为其为活跃。QW</li><li>Bitmap,性能好、且可以统计精确的结果。</li></ul><p>新建DataService类进行统计操作。表现层一分为二，首先是何时记录这个值，其次是查看。记录值在拦截器写比较合适。新建DataInterceptor和DataController。</p><p>返回时使用forward转发，表明当前请求仅完成一半，还需另外一个方法继续处理请求。</p><p>网站统计是管理员的功能，所以最后需要将访问权限定义给管理员</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;UV-Unique-Visitor&quot;&gt;&lt;a href=&quot;#UV-Unique-Visitor&quot; class=&quot;headerlink&quot; title=&quot;UV(Unique Visitor)&quot;&gt;&lt;/a&gt;UV(Unique Visitor)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;独立</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
    <category term="HyperLoglog" scheme="http://yoursite.com/tags/HyperLoglog/"/>
    
  </entry>
  
  <entry>
    <title>讨论社区39  -  Redis高级数据类型</title>
    <link href="http://yoursite.com/2019/08/16/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA39%20-%20Redis%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/08/16/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA39%20-%20Redis%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2019-08-16T15:18:50.000Z</published>
    <updated>2020-09-01T01:07:00.680Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HyperLoglog"><a href="#HyperLoglog" class="headerlink" title="HyperLoglog"></a>HyperLoglog</h3><ul><li>采用一种基数算法，用于完成独立总数的统计。</li><li>占据空间小，无论统计多少个数据，只占12K的内存空间。</li><li>不精确的统计算法，标准误差为0.81%。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 统计20万个重复数据的独立总数</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHyperLogLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String redisKey = <span class="string">&quot;test:hll:01&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100000</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">        redisTemplate.opsForHyperLogLog().add(redisKey,i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100000</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> rd = (<span class="keyword">int</span>) (Math.random() * <span class="number">100000</span> +<span class="number">1</span>);</span><br><span class="line">        redisTemplate.opsForHyperLogLog().add(redisKey,rd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> size = redisTemplate.opsForHyperLogLog().size(redisKey);</span><br><span class="line">    System.out.println(size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将3组数据合并，再统计合并后的重复数据的独立总数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHyperLogLogUnion</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String redisKey2 = <span class="string">&quot;test:hll:02&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100000</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">        redisTemplate.opsForHyperLogLog().add(redisKey2,i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String redisKey3 = <span class="string">&quot;test:hll:02&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100000</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">        redisTemplate.opsForHyperLogLog().add(redisKey3,i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String redisKey4 = <span class="string">&quot;test:hll:02&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100000</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">        redisTemplate.opsForHyperLogLog().add(redisKey4,i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String unionKey = <span class="string">&quot;test:hll:union&quot;</span>;</span><br><span class="line">    redisTemplate.opsForHyperLogLog().union(unionKey,redisKey2,redisKey3,redisKey4);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> size = redisTemplate.opsForHyperLogLog().size(unionKey);</span><br><span class="line">    System.out.println(size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Bitmap"><a href="#Bitmap" class="headerlink" title="Bitmap"></a>Bitmap</h3><ul><li>不是一种独立的数据结构，实际上就是字符串。</li><li>支持按位存取数据，可以将其看成是byte数组。</li><li>适合存储大量的连续的数据的布尔值。</li></ul><p>如论坛签到？两种状态，用连续的01字符串存储</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bitmap 统计一组数据的bool值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBitMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String redisKey = <span class="string">&quot;test:bm:01&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录</span></span><br><span class="line">    redisTemplate.opsForValue().setBit(redisKey,<span class="number">1</span>,<span class="keyword">true</span>);</span><br><span class="line">    redisTemplate.opsForValue().setBit(redisKey,<span class="number">4</span>,<span class="keyword">true</span>);</span><br><span class="line">    redisTemplate.opsForValue().setBit(redisKey,<span class="number">7</span>,<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询</span></span><br><span class="line">    System.out.println(redisTemplate.opsForValue().getBit(redisKey,<span class="number">0</span>));</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().getBit(redisKey,<span class="number">1</span>));</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().getBit(redisKey,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统计</span></span><br><span class="line">    Object obj = redisTemplate.execute(<span class="keyword">new</span> RedisCallback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">doInRedis</span><span class="params">(RedisConnection redisConnection)</span> <span class="keyword">throws</span> DataAccessException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> redisConnection.bitCount(redisKey.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统计3组数据的bool值，并对这3组数据做OR运算</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBitMapOperation</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String redisKey2 = <span class="string">&quot;test:bm:02&quot;</span>;</span><br><span class="line">    redisTemplate.opsForValue().setBit(redisKey2,<span class="number">0</span>,<span class="keyword">true</span>);</span><br><span class="line">    redisTemplate.opsForValue().setBit(redisKey2,<span class="number">1</span>,<span class="keyword">true</span>);</span><br><span class="line">    redisTemplate.opsForValue().setBit(redisKey2,<span class="number">0</span>,<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    String redisKey3 = <span class="string">&quot;test:bm:03&quot;</span>;</span><br><span class="line">    redisTemplate.opsForValue().setBit(redisKey3,<span class="number">2</span>,<span class="keyword">true</span>);</span><br><span class="line">    redisTemplate.opsForValue().setBit(redisKey3,<span class="number">3</span>,<span class="keyword">true</span>);</span><br><span class="line">    redisTemplate.opsForValue().setBit(redisKey3,<span class="number">4</span>,<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    String redisKey4 = <span class="string">&quot;test:bm:04&quot;</span>;</span><br><span class="line">    redisTemplate.opsForValue().setBit(redisKey4,<span class="number">4</span>,<span class="keyword">true</span>);</span><br><span class="line">    redisTemplate.opsForValue().setBit(redisKey4,<span class="number">5</span>,<span class="keyword">true</span>);</span><br><span class="line">    redisTemplate.opsForValue().setBit(redisKey4,<span class="number">6</span>,<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    String redisKey = <span class="string">&quot;test:bm:or&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Object obj = redisTemplate.execute(<span class="keyword">new</span> RedisCallback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">doInRedis</span><span class="params">(RedisConnection redisConnection)</span> <span class="keyword">throws</span> DataAccessException </span>&#123;</span><br><span class="line">            redisConnection.bitOp(RedisCommands.BitOperation.OR, redisKey.getBytes(), redisKey2.getBytes(),</span><br><span class="line">                    redisKey3.getBytes(), redisKey4.getBytes());</span><br><span class="line">            <span class="keyword">return</span> redisConnection.bitCount(redisKey.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println(obj);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(redisTemplate.opsForValue().getBit(redisKey,<span class="number">0</span>));</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().getBit(redisKey,<span class="number">1</span>));</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().getBit(redisKey,<span class="number">2</span>));</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().getBit(redisKey,<span class="number">3</span>));</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().getBit(redisKey,<span class="number">4</span>));</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().getBit(redisKey,<span class="number">5</span>));</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().getBit(redisKey,<span class="number">6</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;HyperLoglog&quot;&gt;&lt;a href=&quot;#HyperLoglog&quot; class=&quot;headerlink&quot; title=&quot;HyperLoglog&quot;&gt;&lt;/a&gt;HyperLoglog&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;采用一种基数算法，用于完成独立总数的统计。&lt;/li&gt;
&lt;</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
    <category term="HyperLoglog" scheme="http://yoursite.com/tags/HyperLoglog/"/>
    
    <category term="Bitmap" scheme="http://yoursite.com/tags/Bitmap/"/>
    
  </entry>
  
  <entry>
    <title>讨论社区38  -  置顶、加精、删除功能实现</title>
    <link href="http://yoursite.com/2019/08/15/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA38%20-%20%E7%BD%AE%E9%A1%B6%E3%80%81%E5%8A%A0%E7%B2%BE%E3%80%81%E5%88%A0%E9%99%A4%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/08/15/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA38%20-%20%E7%BD%AE%E9%A1%B6%E3%80%81%E5%8A%A0%E7%B2%BE%E3%80%81%E5%88%A0%E9%99%A4%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</id>
    <published>2019-08-15T13:29:50.000Z</published>
    <updated>2020-09-01T01:07:00.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h1><ul><li>点击“置顶”、“加精”、“删除”，修改帖子的状态<ul><li>在DiscussPostMapper增加修改方法</li><li>DiscussPostService、DiscussPostController相应增加方法，注意在Es中同步变化</li><li>要在EventConsumer增加消费删帖事件</li><li>修改html和js文件</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改帖子类型</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateType</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> type)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DiscussPostService</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateType</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> discussPostMapper.updateType(id, type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DiscussPostController，还需要出发Es中的事件</span></span><br><span class="line"><span class="comment">// 置顶</span></span><br><span class="line"><span class="meta">@RequestMapping(path = &quot;/top&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">setTop</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    discussPostService.updateType(id, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 触发发帖事件</span></span><br><span class="line">    Event event = <span class="keyword">new</span> Event()</span><br><span class="line">            .setTopic(TOPIC_PUBLISH)</span><br><span class="line">            .setUserId(hostHolder.getUser().getId())</span><br><span class="line">            .setEntityType(ENTITY_TYPE_POST)</span><br><span class="line">            .setEntityId(id);</span><br><span class="line">    eventProducer.fireEvent(event);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TalkingUtil.getJSONString(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加精</span></span><br><span class="line"><span class="meta">@RequestMapping(path = &quot;/wonderful&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">setWonderful</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    discussPostService.updateStatus(id, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 触发发帖事件</span></span><br><span class="line">    Event event = <span class="keyword">new</span> Event()</span><br><span class="line">            .setTopic(TOPIC_PUBLISH)</span><br><span class="line">            .setUserId(hostHolder.getUser().getId())</span><br><span class="line">            .setEntityType(ENTITY_TYPE_POST)</span><br><span class="line">            .setEntityId(id);</span><br><span class="line">    eventProducer.fireEvent(event);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="meta">@RequestMapping(path = &quot;/delete&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">setDelete</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    discussPostService.updateStatus(id, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 触发删帖事件</span></span><br><span class="line">    Event event = <span class="keyword">new</span> Event()</span><br><span class="line">            .setTopic(TOPIC_DELETE)</span><br><span class="line">            .setUserId(hostHolder.getUser().getId())</span><br><span class="line">            .setEntityType(ENTITY_TYPE_POST)</span><br><span class="line">            .setEntityId(id);</span><br><span class="line">    eventProducer.fireEvent(event);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TalkingUtil.getJSONString(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// EventConsumer   Es中也要添加相应的消费事件</span></span><br><span class="line"><span class="comment">// 消费发帖事件</span></span><br><span class="line"><span class="meta">@KafkaListener(topics = &#123;TOPIC_PUBLISH&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlePublishMessage</span><span class="params">(ConsumerRecord record)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (record == <span class="keyword">null</span> || record.value() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;消息的内容为空!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Event event = JSONObject.parseObject(record.value().toString(), Event.class);</span><br><span class="line">    <span class="keyword">if</span> (event == <span class="keyword">null</span>) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;消息格式错误!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DiscussPost post = discussPostService.findDiscussPostById(event.getEntityId());</span><br><span class="line">    elasticsearchService.saveDiscussPost(post);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费删帖事件</span></span><br><span class="line"><span class="meta">@KafkaListener(topics = &#123;TOPIC_DELETE&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDeleteMessage</span><span class="params">(ConsumerRecord record)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (record == <span class="keyword">null</span> || record.value() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;消息的内容为空!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Event event = JSONObject.parseObject(record.value().toString(), Event.class);</span><br><span class="line">    <span class="keyword">if</span> (event == <span class="keyword">null</span>) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;消息格式错误!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    elasticsearchService.deleteDiscussPost(event.getEntityId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h1><ul><li>版主可以执行“置顶”、“加精”操作。管理员可以执行“删除”操作。<ul><li>在SecurityConfig类下配置，置顶、加精、删除的访问权限。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.AccessDeniedException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.WebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.AuthenticationEntryPoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.access.AccessDeniedHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> <span class="keyword">implements</span> <span class="title">TalkingConstant</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 忽略静态资源的拦截</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> </span>&#123;</span><br><span class="line">        web.ignoring().antMatchers(<span class="string">&quot;/resources/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据角色权限，添加访问路径</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 授权</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(</span><br><span class="line">                        ...所有用户可访问路径...</span><br><span class="line">                )</span><br><span class="line">                .hasAnyAuthority(</span><br><span class="line">                        AUTHORITY_USER,</span><br><span class="line">                        AUTHORITY_ADMIN,</span><br><span class="line">                        AUTHORITY_MODERATOR</span><br><span class="line">                )</span><br><span class="line">                .antMatchers(</span><br><span class="line">                        ...版主可访问路径...</span><br><span class="line">                )</span><br><span class="line">                .hasAnyAuthority(</span><br><span class="line">                        AUTHORITY_MODERATOR</span><br><span class="line">                )</span><br><span class="line">                .antMatchers(</span><br><span class="line">                        ...管理员可访问路径...</span><br><span class="line">                )</span><br><span class="line">                .hasAnyAuthority(</span><br><span class="line">                        AUTHORITY_ADMIN</span><br><span class="line">                )</span><br><span class="line">                .anyRequest().permitAll()</span><br><span class="line">                .and().csrf().disable(); <span class="comment">//禁用csrf检查</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 权限不够时的处理：未登录？权限不足？</span></span><br><span class="line">        http.exceptionHandling()</span><br><span class="line">                .authenticationEntryPoint(<span class="keyword">new</span> AuthenticationEntryPoint() &#123;</span><br><span class="line">                    <span class="comment">// 没有登录</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">                        <span class="comment">// 获取请求体的字符串</span></span><br><span class="line">                        String xRequestedWith = request.getHeader(<span class="string">&quot;x-requested-with&quot;</span>);</span><br><span class="line">                        <span class="comment">// 请求为xml，则为异步请求</span></span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">&quot;XMLHttpRequest&quot;</span>.equals(xRequestedWith)) &#123;</span><br><span class="line">                            response.setContentType(<span class="string">&quot;application/plain;charset=utf-8&quot;</span>);</span><br><span class="line">                            PrintWriter writer = response.getWriter();</span><br><span class="line">                            writer.write(TalkingUtil.getJSONString(<span class="number">403</span>, <span class="string">&quot;你还没有登录哦!&quot;</span>));</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;<span class="comment">// 普通请求</span></span><br><span class="line">                            response.sendRedirect(request.getContextPath() + <span class="string">&quot;/login&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .accessDeniedHandler(<span class="keyword">new</span> AccessDeniedHandler() &#123;</span><br><span class="line">                    <span class="comment">// 权限不足</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">                        String xRequestedWith = request.getHeader(<span class="string">&quot;x-requested-with&quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">&quot;XMLHttpRequest&quot;</span>.equals(xRequestedWith)) &#123;</span><br><span class="line">                            response.setContentType(<span class="string">&quot;application/plain;charset=utf-8&quot;</span>);</span><br><span class="line">                            PrintWriter writer = response.getWriter();</span><br><span class="line">                            writer.write(TalkingUtil.getJSONString(<span class="number">403</span>, <span class="string">&quot;你没有访问此功能的权限!&quot;</span>));</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            response.sendRedirect(request.getContextPath() + <span class="string">&quot;/denied&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Security底层默认会拦截/logout请求,进行退出处理.</span></span><br><span class="line">        <span class="comment">// 覆盖它默认的逻辑/logout,才能执行我们自己的退出代码.</span></span><br><span class="line">        http.logout().logoutUrl(<span class="string">&quot;/securitylogout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="按钮显示"><a href="#按钮显示" class="headerlink" title="按钮显示"></a>按钮显示</h1><ul><li><p>版主可以看到“置顶”、“加精”按钮。管理员可以看到“删除“按钮。</p><ul><li>导包：thymeleaf-extras-springsecurity5，thymeleaf对security的支持。</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  文档：<a href="https://github.com/thymeleaf/thymeleaf-extras-springsecurity">https://github.com/thymeleaf/thymeleaf-extras-springsecurity</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sec:authorize=&quot;hasAnyAuthority(&#x27;moderator&#x27;)&quot; 判断是否有权限 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger btn-sm&quot;</span> <span class="attr">id</span>=<span class="string">&quot;topBtn&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">th:disabled</span>=<span class="string">&quot;$&#123;post.type==1&#125;&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasAnyAuthority(&#x27;moderator&#x27;)&quot;</span>&gt;</span>置顶<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger btn-sm&quot;</span> <span class="attr">id</span>=<span class="string">&quot;wonderfulBtn&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">th:disabled</span>=<span class="string">&quot;$&#123;post.status==1&#125;&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasAnyAuthority(&#x27;moderator&#x27;)&quot;</span>&gt;</span>加精<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger btn-sm&quot;</span> <span class="attr">id</span>=<span class="string">&quot;deleteBtn&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">th:disabled</span>=<span class="string">&quot;$&#123;post.status==2&#125;&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasAnyAuthority(&#x27;admin&#x27;)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;功能实现&quot;&gt;&lt;a href=&quot;#功能实现&quot; class=&quot;headerlink&quot; title=&quot;功能实现&quot;&gt;&lt;/a&gt;功能实现&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;点击“置顶”、“加精”、“删除”，修改帖子的状态&lt;ul&gt;
&lt;li&gt;在DiscussPostMapper增加修改方</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="Spring Security" scheme="http://yoursite.com/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>讨论社区37  -  权限控制</title>
    <link href="http://yoursite.com/2019/08/13/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA37%20-%20%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
    <id>http://yoursite.com/2019/08/13/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA37%20-%20%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</id>
    <published>2019-08-13T15:39:20.000Z</published>
    <updated>2020-09-01T01:07:00.680Z</updated>
    
    <content type="html"><![CDATA[<p>导入security</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="登录检查"><a href="#登录检查" class="headerlink" title="登录检查"></a>登录检查</h3><ul><li>之前采用拦截器实现了登录检查，这是简单的权限管理方案，现在将废弃。<ul><li>修改<code>WebMvcConfig</code>，将<code>loginRequiredInterceptor</code>注释。</li></ul></li></ul><h3 id="授权配置"><a href="#授权配置" class="headerlink" title="授权配置"></a>授权配置</h3><ul><li>对当前系统内的所有的请求，分配访问权限（普通用户、版主、管理员）。<ul><li>新建<code>SecurityConfig</code>类，配置静态资源都可以访问</li><li>配置授权操作，以及权限不够时的处理</li></ul></li></ul><h3 id="认证方案"><a href="#认证方案" class="headerlink" title="认证方案"></a>认证方案</h3><ul><li>绕过Security认证流程，采用系统原来的认证方案。<ul><li>Security底层默认会拦截<code>/logout</code>请求,进行退出处理。覆盖它默认的逻辑,才能执行我们自己的退出代码.</li><li>这里没有用Security进行认证，需要将结果自己存入SecurityContext</li><li>UserService增加查询用户权限方法 </li><li>在LoginTicketInterceptor,构建用户认证的结果,并存入SecurityContext,以便于Security进行授权.请求之前需要存储用户认证信息、请求处理之后及退出系统需要将用户认证信息删除。</li></ul></li></ul><h3 id="CSRF配置"><a href="#CSRF配置" class="headerlink" title="CSRF配置"></a>CSRF配置</h3><ul><li><p>防止CSRF攻击的基本原理，以及表单、AJAX的相关配置。</p><ul><li>CSRF攻击：某网站盗取你的Cookie（ticket）凭证，模拟你的身份访问服务器。（发生在提交表单的时候）</li><li>Security会在表单里增加一个TOCKEN(自动生成)</li><li>异步请求Security无法处理，在html文件生成CSRF令牌，（异步不是通过请求体传数据，通过请求头）</li><li>发送AJAX请求之前,将CSRF令牌设置到请求的消息头中.</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--访问该页面时,在此处生成CSRF令牌.--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;_csrf&quot;</span> <span class="attr">th:content</span>=<span class="string">&quot;$&#123;_csrf.token&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;_csrf_header&quot;</span> <span class="attr">th:content</span>=<span class="string">&quot;$&#123;_csrf.headerName&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送AJAX请求之前,将CSRF令牌设置到请求的消息头中.</span></span><br><span class="line"><span class="keyword">var</span> token = $(<span class="string">&quot;meta[name=&#x27;_csrf&#x27;]&quot;</span>).attr(<span class="string">&quot;content&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> header = $(<span class="string">&quot;meta[name=&#x27;_csrf_header&#x27;]&quot;</span>).attr(<span class="string">&quot;content&quot;</span>);</span><br><span class="line">    $(<span class="built_in">document</span>).ajaxSend(<span class="function"><span class="keyword">function</span>(<span class="params">e, xhr, options</span>)</span>&#123;</span><br><span class="line">    xhr.setRequestHeader(header, token);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;导入security&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="Spring Security" scheme="http://yoursite.com/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>讨论社区36  -  Spring Security</title>
    <link href="http://yoursite.com/2019/08/12/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA36%20-%20Spring%20Security/"/>
    <id>http://yoursite.com/2019/08/12/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA36%20-%20Spring%20Security/</id>
    <published>2019-08-12T14:39:20.000Z</published>
    <updated>2020-09-01T01:07:00.680Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://sping.io/projects/spring-security">https://sping.io/projects/spring-security</a></p><p>学习文档：<a href="http://www.spring4all.com/article/428">http://www.spring4all.com/article/428</a></p><ul><li><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li>简介<ul><li>Spring Security是一个专注与为Java应用程序提供身份认证和授权的框架，它的强大之处在于它可以轻松扩展以满足自定义的需求。</li></ul></li><li>特征<ul><li>对身份的认证和授权提供全面的、可扩展的支持。</li><li>防止各种攻击，如会话固定攻击、点击劫持、csrf攻击等。</li><li>支持与Servelt API、Spring MVC等Web技术集成。</li></ul></li><li>原理<ul><li>底层使用Filter（javaEE标准）进行拦截</li><li>Filter–&gt;DispatchServlet–&gt;Interceptor–&gt;Controller(后三者属于Spring MVC)</li></ul></li><li>推荐学习网站：<a href="http://www.spring4all.com/">www.spring4all.com</a><ul><li>看几个核心的Filter源码</li></ul></li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li><p>导包：spring-boot-starter-security</p></li><li><p>User实体类实现UserDetails接口，实现接口中各方法（账号、凭证是否可用过期，管理权限）</p></li><li><p>UserService实现UserDetailsService接口,实现接口方法（security检查用户是否登录时用到该接口）</p></li><li><p>新建SecurityConfig类</p><ul><li>继承WebSecurityConfigurerAdapter</li><li>配置忽略静态资源的访问</li><li>实现认证的逻辑，自定义认证规则（AuthenticationManager: 认证的核心接口）<ul><li>登录相关配置</li><li>退出相关配置</li></ul></li><li>委托模式: ProviderManager将认证委托给AuthenticationProvider.</li><li>实现授权的逻辑<ul><li>授权配置</li><li>增加Filter,处理验证码</li><li>记住我</li></ul></li></ul></li><li><p>重定向，浏览器访问A,服务器返回302，建议访问B.一般不能带数据给B（Session和Cookie）</p></li><li><p>转发，浏览器访问A，A完成部分请求，存入Request,转发给B完成剩下请求。（有耦合）</p><blockquote><p>判断请求在服务端业务是否有耦合，在服务端A，B是独立业务则用重定向；否则使用转发。</p></blockquote></li><li><p>在HomeController添加认证逻辑</p><ul><li>认证成功后,结果会通过SecurityContextHolder存入SecurityContext中.</li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://sping.io/projects/spring-security&quot;&gt;https://sping.io/projects/spring-security&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;学习文档：&lt;a href=&quot;http://www.spring4</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
    <category term="Spring Security" scheme="http://yoursite.com/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>讨论社区35  -  社区搜索功能实现</title>
    <link href="http://yoursite.com/2019/08/10/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA35%20-%20%E7%A4%BE%E5%8C%BA%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/08/10/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA35%20-%20%E7%A4%BE%E5%8C%BA%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</id>
    <published>2019-08-10T15:33:15.000Z</published>
    <updated>2020-09-01T01:07:00.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搜索服务"><a href="#搜索服务" class="headerlink" title="搜索服务"></a>搜索服务</h1><ul><li>将帖子保存至Elasticsearch服务器。<ul><li>对贴子实体类DiscussPost用注解进行相关配置</li><li>从Mybatis取数据存入</li><li>在dao层创建DiscussPostRepository类，继承ElasticsearchRepository接口即可，它集成了CRUD方法</li></ul></li><li>从Elasticsearch服务器删除帖子。</li><li>从Elasticsearch服务器搜索帖子。<ul><li>Es可以在搜索到的词加标签，达到高亮显示</li><li>利用elasticTemplate.queryForPage()查询</li></ul></li></ul><h1 id="发布事件"><a href="#发布事件" class="headerlink" title="发布事件"></a>发布事件</h1><ul><li>发布帖子时，将帖子异步的提交到Elasticsearch服务器。<ul><li>新建ElasticsearchService类，定义CRUD和搜索方法。</li><li>在DiscussPostController类发帖时，定义和触发发帖事件（Event、eventProducer.fireEvent(event)）</li></ul></li><li>增加评论时，将帖子异步的提交到Elasticsearch服务器。<ul><li>在CommentController类发表评论时，定义和触发发帖事件</li></ul></li><li>在消费组件中增加一个方法，消费帖子发布事件。<ul><li>在EventConsumer类增加消费发帖事件的方法</li><li>在事件中查询帖子，存到Es服务器</li></ul></li></ul><h1 id="显示结果"><a href="#显示结果" class="headerlink" title="显示结果"></a>显示结果</h1><ul><li>在控制器中处理搜索请求，在HTML上显示搜索结果。<ul><li>新建SearchController类处理搜索请求</li><li>此时为GET请求，keyword的传入（search?keyword=xxx）</li><li>修改index.html,表单提交路径，文本框name=”keyword”</li><li>在search.html修改，遍历取到帖子。</li></ul></li></ul><h1 id="DEBUG"><a href="#DEBUG" class="headerlink" title="DEBUG"></a>DEBUG</h1><ul><li>记得要在kafka创建新的TOPIC,坑爹的debug了好久。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;搜索服务&quot;&gt;&lt;a href=&quot;#搜索服务&quot; class=&quot;headerlink&quot; title=&quot;搜索服务&quot;&gt;&lt;/a&gt;搜索服务&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;将帖子保存至Elasticsearch服务器。&lt;ul&gt;
&lt;li&gt;对贴子实体类DiscussPost用注解进行相关</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="Elasticsearch" scheme="http://yoursite.com/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>讨论社区34  -  Spring整合Elasticsearch</title>
    <link href="http://yoursite.com/2019/08/08/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA34%20-%20Spring%E6%95%B4%E5%90%88Elasticsearch/"/>
    <id>http://yoursite.com/2019/08/08/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA34%20-%20Spring%E6%95%B4%E5%90%88Elasticsearch/</id>
    <published>2019-08-08T13:32:50.000Z</published>
    <updated>2020-09-01T01:07:00.680Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>引入依赖</p><ul><li>spring-boot-starter-data-elasticsearch</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置Elasticsearch</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># ElasticSearch</span><br><span class="line">spring.data.elasticsearch.cluster-name=talking</span><br><span class="line"># 9200是http访问的端口，9300是tcp访问的端口</span><br><span class="line">spring.data.elasticsearch.cluster-nodes=127.0.0.1:9300</span><br></pre></td></tr></table></figure></li><li><p>cluster-name、cluster-nodes（集群的名字，节点）</p></li><li><p>Redis和Es底层都用到了Netty,有启动冲突。解决：在TalkingApplication类加入初始化方法进行配置。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 解决netty启动冲突问题</span></span><br><span class="line">    <span class="comment">// see Netty4Utils.setAvailableProcessors()</span></span><br><span class="line">    System.setProperty(<span class="string">&quot;es.set.netty.runtime.available.processors&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Spring Data Elasticsearch(调用API)<ul><li><code>ElasticsearchTemplate</code>（集成了Es的CRUD方法）</li><li><code>ElasticsearchRepository</code>（接口，底层为ElasticsearchTemplate，用起来更方便）</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 ElasticsearchRepository</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSearchByRepository</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SearchQuery searchQuery = <span class="keyword">new</span> NativeSearchQueryBuilder()</span><br><span class="line">    .withQuery(QueryBuilders.multiMatchQuery(<span class="string">&quot;test&quot;</span>,<span class="string">&quot;title&quot;</span>,<span class="string">&quot;content&quot;</span>))</span><br><span class="line">    .withSort(SortBuilders.fieldSort(<span class="string">&quot;type&quot;</span>).order(SortOrder.DESC))</span><br><span class="line">    .withSort(SortBuilders.fieldSort(<span class="string">&quot;score&quot;</span>).order(SortOrder.DESC))</span><br><span class="line">    .withSort(SortBuilders.fieldSort(<span class="string">&quot;createTime&quot;</span>).order(SortOrder.DESC))</span><br><span class="line">    .withPageable(PageRequest.of(<span class="number">0</span>,<span class="number">10</span>))</span><br><span class="line">    .withHighlightFields(</span><br><span class="line">    <span class="keyword">new</span> HighlightBuilder.Field(<span class="string">&quot;title&quot;</span>).preTags(<span class="string">&quot;&lt;em&gt;&quot;</span>).postTags(<span class="string">&quot;&lt;/em&gt;&quot;</span>),</span><br><span class="line">    <span class="keyword">new</span> HighlightBuilder.Field(<span class="string">&quot;content&quot;</span>).preTags(<span class="string">&quot;&lt;em&gt;&quot;</span>).postTags(<span class="string">&quot;&lt;/em&gt;&quot;</span>)</span><br><span class="line">    ).build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// elasticTemplate.queryForPage(searchQuery, class, SearchResultMapper)</span></span><br><span class="line">    <span class="comment">// 底层获取得到了高亮显示的值, 但是没有返回.</span></span><br><span class="line">    Page&lt;DiscussPost&gt; page = discussPostRepository.search(searchQuery);</span><br><span class="line"></span><br><span class="line">    System.out.println(page.getTotalElements());</span><br><span class="line">    System.out.println(page.getTotalPages());</span><br><span class="line">    System.out.println(page.getNumber());</span><br><span class="line">    System.out.println(page.getSize());</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (DiscussPost post : page) &#123;</span><br><span class="line">    System.out.println(post);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSearchByTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SearchQuery searchQuery = <span class="keyword">new</span> NativeSearchQueryBuilder()</span><br><span class="line">    .withQuery(QueryBuilders.multiMatchQuery(<span class="string">&quot;互联网寒冬&quot;</span>, <span class="string">&quot;title&quot;</span>, <span class="string">&quot;content&quot;</span>))</span><br><span class="line">        .withSort(SortBuilders.fieldSort(<span class="string">&quot;type&quot;</span>).order(SortOrder.DESC))</span><br><span class="line">         .withSort(SortBuilders.fieldSort(<span class="string">&quot;score&quot;</span>).order(SortOrder.DESC))</span><br><span class="line">         .withSort(SortBuilders.fieldSort(<span class="string">&quot;createTime&quot;</span>).order(SortOrder.DESC))</span><br><span class="line">         .withPageable(PageRequest.of(<span class="number">0</span>, <span class="number">10</span>))</span><br><span class="line">         .withHighlightFields(</span><br><span class="line">                 <span class="keyword">new</span> HighlightBuilder.Field(<span class="string">&quot;title&quot;</span>).preTags(<span class="string">&quot;&lt;em&gt;&quot;</span>).postTags(<span class="string">&quot;&lt;/em&gt;&quot;</span>),</span><br><span class="line">                 <span class="keyword">new</span> HighlightBuilder.Field(<span class="string">&quot;content&quot;</span>).preTags(<span class="string">&quot;&lt;em&gt;&quot;</span>).postTags(<span class="string">&quot;&lt;/em&gt;&quot;</span>)</span><br><span class="line">          ).build();</span><br><span class="line"></span><br><span class="line">        Page&lt;DiscussPost&gt; page = elasticTemplate.queryForPage(searchQuery, DiscussPost.class, <span class="keyword">new</span> SearchResultMapper() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> &lt;T&gt; <span class="function">AggregatedPage&lt;T&gt; <span class="title">mapResults</span><span class="params">(SearchResponse response, Class&lt;T&gt; aClass, Pageable pageable)</span> </span>&#123;</span><br><span class="line">            SearchHits hits = response.getHits();</span><br><span class="line">            <span class="keyword">if</span> (hits.getTotalHits() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">   <span class="comment">//封装数据</span></span><br><span class="line">            List&lt;DiscussPost&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">            DiscussPost post = <span class="keyword">new</span> DiscussPost();</span><br><span class="line"></span><br><span class="line">            String id = hit.getSourceAsMap().get(<span class="string">&quot;id&quot;</span>).toString();</span><br><span class="line">            post.setId(Integer.valueOf(id));</span><br><span class="line"></span><br><span class="line">            String userId = hit.getSourceAsMap().get(<span class="string">&quot;userId&quot;</span>).toString();</span><br><span class="line">            post.setUserId(Integer.valueOf(userId));</span><br><span class="line"></span><br><span class="line">            String title = hit.getSourceAsMap().get(<span class="string">&quot;title&quot;</span>).toString();</span><br><span class="line">            post.setTitle(title);</span><br><span class="line"></span><br><span class="line">            String content = hit.getSourceAsMap().get(<span class="string">&quot;content&quot;</span>).toString();</span><br><span class="line">            post.setContent(content);</span><br><span class="line"></span><br><span class="line">            String status = hit.getSourceAsMap().get(<span class="string">&quot;status&quot;</span>).toString();</span><br><span class="line">            post.setStatus(Integer.valueOf(status));</span><br><span class="line"></span><br><span class="line">            String createTime = hit.getSourceAsMap().get(<span class="string">&quot;createTime&quot;</span>).toString();</span><br><span class="line">            post.setCreateTime(<span class="keyword">new</span> Date(Long.valueOf(createTime)));</span><br><span class="line"></span><br><span class="line">            String commentCount = hit.getSourceAsMap().get(<span class="string">&quot;commentCount&quot;</span>).toString();</span><br><span class="line">            post.setCommentCount(Integer.valueOf(commentCount));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理高亮显示的结果</span></span><br><span class="line">            HighlightField titleField = hit.getHighlightFields().get(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (titleField != <span class="keyword">null</span>) &#123;</span><br><span class="line">            post.setTitle(titleField.getFragments()[<span class="number">0</span>].toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            HighlightField contentField = hit.getHighlightFields().get(<span class="string">&quot;content&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (contentField != <span class="keyword">null</span>) &#123;</span><br><span class="line">            post.setContent(contentField.getFragments()[<span class="number">0</span>].toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            list.add(post);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AggregatedPageImpl(list, pageable,</span><br><span class="line">                        hits.getTotalHits(), response.getAggregations(), response.getScrollId(), hits.getMaxScore());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">mapSearchHit</span><span class="params">(SearchHit searchHit, Class&lt;T&gt; aClass)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            System.out.println(page.getTotalElements());</span><br><span class="line">            System.out.println(page.getTotalPages());</span><br><span class="line">            System.out.println(page.getNumber());</span><br><span class="line">            System.out.println(page.getSize());</span><br><span class="line">            <span class="keyword">for</span> (DiscussPost post : page) &#123;</span><br><span class="line">                System.out.println(post);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>匹配的结果是与高亮匹配相关的前后文，不会只高亮匹配显示所有text文本。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;引入依赖&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;spring-boot-starter-data-elasticsearch&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
    <category term="Elasticsearch" scheme="http://yoursite.com/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>讨论社区33  -  Elasticsearch入门</title>
    <link href="http://yoursite.com/2019/08/06/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA33%20-%20Elasticsearch%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2019/08/06/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA33%20-%20Elasticsearch%E5%85%A5%E9%97%A8/</id>
    <published>2019-08-06T14:38:50.000Z</published>
    <updated>2020-09-01T01:07:00.680Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://elastic.co/">https://elastic.co</a></p><h1 id="Elasticsearch简介"><a href="#Elasticsearch简介" class="headerlink" title="Elasticsearch简介"></a>Elasticsearch简介</h1><ul><li>一个分布式的、Restful风格（请求标准的描述）的搜索引擎。<ul><li>支持对各种类型的数据的检索。</li><li>搜索速度快，可以提供实时的搜索服务。</li><li>便于水平扩展，每秒可以处理PB级海量数据。</li></ul></li></ul><h1 id="Elasticsearch术语"><a href="#Elasticsearch术语" class="headerlink" title="Elasticsearch术语"></a>Elasticsearch术语</h1><ul><li>索引（对应数据库）、类型（对应表）、文档（表里一行）、字段（一列）。   最新的版本类型被废弃。                                                                                                                                                                                                                                                                                                                                                                                                                               </li><li>集群(服务器组合在一起)、节点（集群中每台服务器）、分片（对索引的划分）、副本（分片的备份）。</li></ul><p>通过ES搜索的数据必须要在ES中转存一份，某种角度来说它是一个数据库。</p><h1 id="Elasticsearch使用"><a href="#Elasticsearch使用" class="headerlink" title="Elasticsearch使用"></a>Elasticsearch使用</h1><ul><li><p>安装、修改配置文件</p><ul><li>elasticsearch.yml文件，修改cluster.name，path.data，path.logs</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ----------------------------------- Paths ------------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Path to directory where to store the data (separate multiple locations by comma):</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">path.data:</span> <span class="string">d:\work\data\elasticsearch-6.4.3\data</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Path to log files:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">path.logs:</span> <span class="string">d:\work\data\elasticsearch-6.4.3\logs</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>配置环境变量</li></ul></li></ul><ul><li><p>安装中文分词插件（ES仅支持中文分词）</p><p>github下载   <a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></p><ul><li>ik插件安装（解压缩）到plugins文件夹下，注意版本对应</li></ul><p>config目录下<code>IKAnalyzer.cfg.xml</code>可以配置自定义词典</p></li></ul><ul><li>安装postman(提交html数据给ES)模拟web客户端，或者在浏览器安装postman插件</li></ul><ul><li><p>启动ES:打开 bin/elasticsearch.bat</p><ul><li><p>查看集群健康状态：curl -X GET “localhost:9200/_cat/health?v”</p></li><li><p>查看节点：curl -X GET “localhost:9200/_cat/nodes?v”</p></li><li><p>查看索引：curl -X GET “localhost:9200/_cat/indices?v”</p></li><li><p>创建索引：curl -X PUT “localhost:9200/test”</p></li><li><p>删除索引：curl -X DELETE “localhost:9200/test”</p></li></ul></li></ul><p>![1598840933384](讨论社区33 - Elasticsearch入门.assets/1598840933384.png)</p><p><code>PUT</code>,<code>GET</code>,<code>DELETE</code> HTTP协议的请求</p><ul><li>使用postman查询<ul><li>提交数据，PUT localhost:9200/test/_doc/1选择Body,raw,JSON</li><li>搜索，GET localhost:9200/test/_search?q=title(/content):xxx</li><li>搜索时ES对关键词进行了分词</li><li>通过请求体构造复杂搜索条件</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--构造搜索条件  网址/索引名/_search?q=字段:字段名 --&gt;</span></span><br><span class="line">localhost:9200/test/_search?q=title:$&#123;search_condition&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--构造复杂搜索条件  网址/索引名/_search 提交请求体为JSON数据 --&gt;</span></span><br><span class="line">localhost:9200/test/_search</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">插入test的数据请求体为</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;...&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;content&quot;</span>:<span class="string">&quot;....&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">复杂查询请求体为：</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line"><span class="attr">&quot;multi_match&quot;</span>:&#123;</span><br><span class="line"><span class="attr">&quot;query&quot;</span>: <span class="string">&quot;条件&quot;</span>,</span><br><span class="line"><span class="attr">&quot;fields&quot;</span>: [<span class="string">&quot;title&quot;</span>,<span class="string">&quot;content&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://elastic.co/&quot;&gt;https://elastic.co&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Elasticsearch简介&quot;&gt;&lt;a href=&quot;#Elasticsearch简介&quot; class=&quot;headerlink&quot; title=&quot;El</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="Elasticsearch" scheme="http://yoursite.com/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>讨论社区32  -  发送、显示系统通知</title>
    <link href="http://yoursite.com/2019/08/05/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA32%20-%20%E5%8F%91%E9%80%81%E3%80%81%E6%98%BE%E7%A4%BA%E7%B3%BB%E7%BB%9F%E9%80%9A%E7%9F%A5/"/>
    <id>http://yoursite.com/2019/08/05/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA32%20-%20%E5%8F%91%E9%80%81%E3%80%81%E6%98%BE%E7%A4%BA%E7%B3%BB%E7%BB%9F%E9%80%9A%E7%9F%A5/</id>
    <published>2019-08-05T15:38:50.000Z</published>
    <updated>2020-09-01T01:07:00.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="发送系统通知"><a href="#发送系统通知" class="headerlink" title="发送系统通知"></a>发送系统通知</h1><ul><li>触发事件<ul><li>评论后，发布通知</li><li>点赞后，发布通知</li><li>关注后，发布通知</li></ul></li><li>处理事件<ul><li>封装事件对象</li><li>开发事件的生产者</li><li>开发事件的消费者</li></ul></li></ul><h1 id="显示系统通知"><a href="#显示系统通知" class="headerlink" title="显示系统通知"></a>显示系统通知</h1><ul><li><p>通知列表</p><ul><li>显示评论、点赞、关注三种类型的通知</li></ul><p>统一处理三种类型的通知</p></li><li><p>通知详情</p><ul><li>分页显示某一类主题所包含的通知</li></ul></li><li><p>未读消息</p><ul><li>在页面头部显示所有的未读消息数量</li></ul><p>用拦截器处理，要注册拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HostHolder hostHolder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageService messageService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        User user = hostHolder.getUser();</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="keyword">null</span> &amp;&amp; modelAndView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> letterUnreadCount = messageService.findLetterUnreadCount(user.getId(), <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">int</span> noticeUnreadCount = messageService.findNoticeUnreadCount(user.getId(), <span class="keyword">null</span>);</span><br><span class="line">            modelAndView.addObject(<span class="string">&quot;allUnreadCount&quot;</span>, letterUnreadCount + noticeUnreadCount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;发送系统通知&quot;&gt;&lt;a href=&quot;#发送系统通知&quot; class=&quot;headerlink&quot; title=&quot;发送系统通知&quot;&gt;&lt;/a&gt;发送系统通知&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;触发事件&lt;ul&gt;
&lt;li&gt;评论后，发布通知&lt;/li&gt;
&lt;li&gt;点赞后，发布通知&lt;/li&gt;
&lt;li</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="Kafka" scheme="http://yoursite.com/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>讨论社区31  -  Spring整合Kafka</title>
    <link href="http://yoursite.com/2019/08/04/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA31%20-%20Spring%E6%95%B4%E5%90%88Kafka/"/>
    <id>http://yoursite.com/2019/08/04/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA31%20-%20Spring%E6%95%B4%E5%90%88Kafka/</id>
    <published>2019-08-04T14:23:32.000Z</published>
    <updated>2020-09-01T01:07:00.680Z</updated>
    
    <content type="html"><![CDATA[<ul><li>引入依赖<ul><li>spring-kafka</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置Kafka<ul><li>配置server、consumer</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># KafkaProperties</span><br><span class="line">spring.kafka.bootstrap-servers=localhost:9092</span><br><span class="line"># kafka/config下consumer.properties，默认group-id是test-consumer-group</span><br><span class="line">spring.kafka.consumer.group-id=talking-consumer-group</span><br><span class="line">spring.kafka.consumer.enable-auto-commit=true</span><br><span class="line">spring.kafka.consumer.auto-commit-interval=3000</span><br></pre></td></tr></table></figure><ul><li>访问Kafka<ul><li>生产者<br><code>kafkaTemplate.send(topic, data);</code></li><li>消费者<br><code>@KafkaListener(topics = &#123;&quot;test&quot;&#125;)</code><br><code>public void handleMessage(ConsumerRecord record) &#123;&#125;</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.annotation.KafkaListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.core.KafkaTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = TalkingApplication.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaProducer kafkaProducer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testKafka</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        kafkaProducer.sendMessage(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        kafkaProducer.sendMessage(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;在吗&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span> * <span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KafkaProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String topic, String content)</span> </span>&#123;</span><br><span class="line">        kafkaTemplate.send(topic, content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KafkaConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@KafkaListener(topics = &#123;&quot;test&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(ConsumerRecord record)</span> </span>&#123;</span><br><span class="line">        System.out.println(record.value());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;引入依赖&lt;ul&gt;
&lt;li&gt;spring-kafka&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line</summary>
      
    
    
    
    <category term="讨论社区项目" scheme="http://yoursite.com/categories/%E8%AE%A8%E8%AE%BA%E7%A4%BE%E5%8C%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
    <category term="Kafka" scheme="http://yoursite.com/tags/Kafka/"/>
    
  </entry>
  
</feed>
